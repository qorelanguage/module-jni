#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%new-style
%require-types
%strict-args
%enable-all-warnings

%requires jni
%requires QUnit
%requires Util
%requires SqlUtil
%requires BulkSqlUtil
%requires DbDataProvider
%requires HttpServer
%requires Mime
%requires Logger

%requires reflection

%module-cmd(jni) add-relative-classpath qore-jni-test.jar
# warning: hardcoded build directory
%module-cmd(jni) add-relative-classpath ../build/qore-jni.jar
%module-cmd(jni) add-relative-classpath ../build/qore-jni-compiler.jar

%module-cmd(jni) import java.lang.reflect.*
%module-cmd(jni) import java.lang.invoke.*
%module-cmd(jni) import org.qore.jni.test.Fields
%module-cmd(jni) import org.qore.jni.test.QoreJavaApiTest

%module-cmd(jni) import org.qore.jni.compiler.QoreJavaCompiler
%module-cmd(jni) import org.qore.jni.compiler.CompilerOutput

%module-cmd(jni) import org.qore.lang.*
%module-cmd(jni) import org.qore.lang.sqlutil.*
%module-cmd(jni) import org.qore.lang.mapper.*
%module-cmd(jni) import org.qore.lang.tablemapper.*
%module-cmd(jni) import org.qore.lang.test.QoreJavaLangApiTest
%module-cmd(jni) import org.qore.lang.restclient.*
%module-cmd(jni) import org.qore.lang.mailmessage.*
%module-cmd(jni) import org.qore.lang.smtpclient.*

%module-cmd(jni) import java.util.ArrayList

%try-module python
%define NO_PYTHON
%endtry

%ifndef NO_PYTHON
%module-cmd(python) import os
%endif

our int code_test_var;

class TestHelper {
    private {
        static hash<auto> hash_value = {};
    }

    static setHash(hash<auto> h) {
        hash_value = h;
    }

    static setHashList(list<auto> l) {
        hash_value = l[0];
    }

    static hash<auto> getHash() {
        return hash_value;
    }
}

class SimpleStringHandler inherits AbstractHttpRequestHandler {
    private {
        *string m_data;
        string m_mime;
    }
    constructor(string mime, *string str) {
        m_mime = mime;
        m_data = str;
    }
    hash<auto> handleRequest(hash<auto> cx, hash<auto> hdr, *data body) {
        if (hdr."do-error") {
            return makeResponse(404, "test error", {"Content-Type": MimeTypeText});
        }
        if (hdr.method == "GET") {
            return makeResponse(200, m_data ?? binary(body), {"Content-Type": m_mime});
        } else if (hdr.method == "PUT") {
            return makeResponse(200, m_data ?? binary(body), {"Content-Type": m_mime});
        } else if (hdr.method == "PATCH") {
            return makeResponse(200, m_data ?? binary(body), {"Content-Type": m_mime});
        } else if (hdr.method == "POST") {
            return makeResponse(200, m_data ?? binary(body), {"Content-Type": m_mime});
        } else if (hdr.method == "DELETE") {
            return makeResponse(404, m_data ?? binary(body), {"Content-Type": m_mime});
        }
    }
}

class DtorThrows {
    destructor() {
        throw "DTOR-ERROR";
    }
    dummy() {
    }
}

class MyFields inherits Fields {
    auto memberGate(string str) {
        return Fields::memberGate(str, True);
    }
}

class TestClass {
    public {
        string member = "mem";
    }

    string getString(string str = "default") {
        return str + "-x";
    }

    list<hash<auto>> getListOfHashes() {
        return (
            {
                "a": 1,
                "b": "two",
            },
            {
                "a": 3,
                "b": "four",
            },
        );
    }

    static hash<auto> get(int i) {
        return {};
    }
}

class TestClass2 {
    public {
        static int cnt = 0;
    }

    destructor() {
        ++cnt;
    }

    string getString(string str = "default") {
        return str + "-y";
    }
}

TestClass sub get_object() {
    return new TestClass();
}

thread_local int tld_int = 1;
class DynamicTest {
    static int test() {
        return tld_int;
    }
}

class BaseTest {
    string vsprintf(string fmt) {
        return Qore::vsprintf(fmt, argv);
    }
}

class AbstractTest inherits Mutex, BaseTest {
    abstract string test(string id, hash<auto> info);
}

class AbstractTest2 inherits BaseTest {
    abstract int test(auto arg);
}

list<auto> sub gtcs(int count, list<auto> rv = get_thread_call_stack()) {
    return !--count ? rv : gtcs(count, rv);
}

public class Main inherits QUnit::Test {
    public {
        #! source: class Test { String get() { return "test"; }}
        const TestClass1ByteCode = <cafebabe0000003700110a0004000d08000e07000f0700100100063c696e69743e010003282956>
            + <010004436f646501000f4c696e654e756d6265725461626c6501000367657401001428294c6a6176612f6c616e672f537472>
            + <696e673b01000a536f7572636546696c65010009546573742e6a6176610c0005000601000474657374010004546573740100>
            + <106a6176612f6c616e672f4f626a656374002100030004000000000002000100050006000100070000001d00010001000000>
            + <052ab70001b10000000100080000000600010000000100000009000a000100070000001b00010001000000031202b0000000>
            + <010008000000060001000000020001000b00000002000c>;

        const TestClass2ByteCode = <cafebabe0000003400110a0004000d08000e07000f0700100100063c696e69743e010003282956>
            + <010004436f646501000f4c696e654e756d6265725461626c6501000367657401001428294c6a6176612f6c616e672f537472>
            + <696e673b01000a536f7572636546696c6501000a54657374322e6a6176610c00050006010005546573743201000d6d792f74>
            + <6573742f54657374320100106a6176612f6c616e672f4f626a65637400200003000400000000000200000005000600010007>
            + <0000001d00010001000000052ab70001b10000000100080000000600010000000300000009000a000100070000001b000100>
            + <01000000031202b0000000010008000000060001000000050001000b00000002000c>;

        const TEXT = "Lorem Ipsum";

        const Sender = "foo@bar.cz";
        const Subject = "foo bar";
        const To = "target@bar.cz";
    }

    constructor() : Test("jni test", "1.0") {
        addTestCase("codegen test", \javaCodegenTest());
        addTestCase("arg test", \argTest());
        addTestCase("class compat test", \classCompatTest());
        addTestCase("code test", \testCode());
        addTestCase("smtpclient test", \smtpClientTest());
        addTestCase("mailmessage test", \mailMessageTest());
        addTestCase("restclient test", \restClientTest());
        addTestCase("object lifecycle test", \objectLifecycleTest());
        addTestCase("qore exception test", \qoreExceptionTest());
        addTestCase("call stack test", \callStackTest());
        addTestCase("closure test", \closureTest());
        addTestCase("exception stack", \exceptionStackTest());
        addTestCase("Qore Java API test", \qoreJavaApiTest());
        addTestCase("call static method test", \callStaticMethodTest());
        addTestCase("hash map test", \hashMapTest());
        addTestCase("number test", \numberTest());
        addTestCase("object test", \objectTest());
        addTestCase("date test", \dateTest());
        addTestCase("defineClass", \defineClassTest());
        addTestCase("issue 2950", \issue2950());
        addTestCase("class test", \testJniClasses());
        addTestCase("static method invocation test", \testStaticMethods());
        addTestCase("instance method invocation test", \testInstanceMethods());
        addTestCase("float conversion test", \testFloatConversions());
        addTestCase("static fields access test", \testStaticFields());
        addTestCase("instance fields access test", \testInstanceFields());
        addTestCase("callback test", \testCallback());
        addTestCase("constructor test", \testConstructor());
        addTestCase("string test", \testString());
        addTestCase("array test", \testArray());
        addTestCase("dispatcher destructor throws a Qore exception", \testDispatchDtorThrows());
        addTestCase("callback return value test", \testCallbackRetVal());
        addTestCase("special conversions test", \testSpecialConversions());
        addTestCase("api test", \testQoreJavaApi());

        Qore::exit(main());
    }

    javaCodegenTest() {
        binary b0 = get_byte_code("::Qore::Thread::Mutex");
        assertEq(Type::Binary, b0.type());
        binary b1 = get_byte_code("Mutex");
        assertEq(Type::Binary, b1.type());
        assertEq(b0, b1);

        try {
            {
                # compile and execute QoreDynamicTest13.java
                QoreJavaCompiler compiler();
                compiler::CompilerOutput newClassData = compiler.compile("org.qore.test.QoreDynamicTest13",
                    File::readTextFile(get_script_dir() + "/QoreDynamicTest13.java"));
                binary fdata = newClassData.file.openInputStream().readAllBytes();
                assertGt(0, fdata.size());
                reflect::Method m = newClassData.cls.getMethod("test0", load_class("org/qore/jni/Hash"));
                string url = "https://localhost:8001/";
                auto rc = m.invoke(NOTHING, {"url": url});
                on_error printf("h: %N\n", rc);
                assertEq("object<RestClient>", rc.fullType());
                assertEq(url, rc.getURL());
            }
%ifndef NO_PYTHON
            {
                # compile and execute QoreDynamicTest14.java
                QoreJavaCompiler compiler();
                hash<auto> sources = {
                    "org.qore.test.QoreDynamicTest14": File::readTextFile(get_script_dir() +
                        "/../test/QoreDynamicTest14.java"),
                };
                hash<auto> cv = compiler.compile(sources);
                #printf("%N\n", cv);
                compiler::CompilerOutput newClassData = cv{"org.qore.test.QoreDynamicTest14"};
                binary fdata = newClassData.file.openInputStream().readAllBytes();
                assertEq(True, fdata.size() > 0);
                object obj = newClassData.cls.newInstance();
                assertEq("{\"a\": 1}", obj.test({"a": 1}));
            }
%endif

            {
                # compile and execute QoreDynamicTest15.java
                QoreJavaCompiler compiler();
                hash<auto> sources = {
                    "org.qore.test.QoreDynamicTest15": File::readTextFile(get_script_dir() +
                        "/../test/QoreDynamicTest15.java"),
                };
                hash<auto> cv = compiler.compile(sources);
                #printf("%N\n", cv);
                compiler::CompilerOutput newClassData = cv{"org.qore.test.QoreDynamicTest15"};
                binary fdata = newClassData.file.openInputStream().readAllBytes();
                assertEq(True, fdata.size() > 0);

                Program p(PO_NEW_STYLE);
                p.setScriptPath(get_script_path());
                p.issueModuleCmd("jni", "define-class org/qore/test/QoreDynamicTest15 " + fdata.toBase64());
                p.issueModuleCmd("jni", "define-class org/qore/test/TestClass "
                    + cv{"org.qore.test.TestClass"}.file.openInputStream().readAllBytes().toBase64());

                p.parse("
class X inherits QoreDynamicTest15 {
    int get() {
        return 1;
    }
}

int sub test() {
    X x();
    TestClass c();
    return c.get(x);
}", "test");

                assertEq(2, p.callFunction("test"));
            }

            {
                # compile and execute QoreDynamicTest16.java
                QoreJavaCompiler compiler();
                hash<auto> sources = {
                    "org.qore.test.QoreDynamicTest16": File::readTextFile(get_script_dir() +
                        "/../test/QoreDynamicTest16.java"),
                };
                hash<auto> cv = compiler.compile(sources);
                #printf("%N\n", cv);
                compiler::CompilerOutput newClassData = cv{"org.qore.test.QoreDynamicTest16"};
                binary fdata = newClassData.file.openInputStream().readAllBytes();
                assertEq(True, fdata.size() > 0);

                Program p(PO_NEW_STYLE);
                p.setScriptPath(get_script_path());
                p.issueModuleCmd("jni", "define-class org/qore/test/QoreDynamicTest16 " + fdata.toBase64());
                p.issueModuleCmd("jni", "define-class org/qore/test/TestClass "
                    + cv{"org.qore.test.TestClass"}.file.openInputStream().readAllBytes().toBase64());

                p.parse("
class X inherits QoreDynamicTest16 {
    public {
        static string topic;
    }
    nothing messageArrived(string topic, *Jni::java::lang::Class c) {
        X::topic = topic;
    }
}

string sub test() {
    X x();
    TestClass c();
    c.get(x);
    return X::topic;
}
", "test");

                assertEq("test", p.callFunction("test"));
            }

            {
                Program p(PO_NEW_STYLE);
                p.setScriptPath(get_script_path());
                p.importClass("AbstractTest");

                QoreJavaCompiler compiler();
                hash<auto> sources = {
                    "org.qore.test.QoreDynamicTest17": "
package org.qore.test;

import qore.AbstractTest2;
import org.qore.jni.Hash;

public class QoreDynamicTest17 extends AbstractTest2 {
    public QoreDynamicTest17() throws Throwable {
        super();
    }

    public long test(Object arg) throws Throwable {
        return Long.parseLong(String.valueOf(arg));
    }
}",
                };
                hash<auto> cv = compiler.compile(sources);
                #printf("%N\n", cv);
                compiler::CompilerOutput newClassData = cv{"org.qore.test.QoreDynamicTest17"};
                binary fdata = newClassData.file.openInputStream().readAllBytes();
                assertEq(True, fdata.size() > 0);
                object obj = define_class("org/qore/test/QoreDynamicTest17", fdata).newInstance();
                assertEq(1, obj.test(1));
            }

            {
                Program p(PO_NEW_STYLE);
                p.setScriptPath(get_script_path());
                p.importClass("AbstractTest");

                QoreJavaCompiler compiler();
                hash<auto> sources = {
                    "org.qore.test.QoreDynamicTest18": "
package org.qore.test;

import qore.AbstractTest;
import org.qore.jni.Hash;

public class QoreDynamicTest18 extends AbstractTest {
    public QoreDynamicTest18() throws Throwable {
        super();
    }

    public String test(String id, Hash info) throws Throwable {
        return id + \"-\" + info.toString();
    }

    public String test2(String fmt, Object arg0, Object arg1, Object arg2) throws Throwable {
        return vsprintf(fmt, arg0, arg1, arg2);
    }
}",
                };
                hash<auto> cv = compiler.compile(sources);
                #printf("%N\n", cv);
                compiler::CompilerOutput newClassData = cv{"org.qore.test.QoreDynamicTest18"};
                binary fdata = newClassData.file.openInputStream().readAllBytes();
                assertEq(True, fdata.size() > 0);
                object obj = define_class("org/qore/test/QoreDynamicTest18", fdata).newInstance();
                assertEq("id-{}", obj.test("id", {}));
                assertEq("1-2-3", obj.vsprintf("%s-%s-%s", 1, 2, 3));
                assertEq("1-2-3", obj.test2("%s-%s-%s", 1, 2, 3));
            }

            {
                # compile and execute QoreDynamicTest12.java
                QoreJavaCompiler compiler();
                hash<auto> sources = {
                    "org.qore.test.QoreDynamicTest12": File::readTextFile(get_script_dir() +
                        "/../test/QoreDynamicTest12.java"),
                };
                hash<auto> cv = compiler.compile(sources);
                #printf("%N\n", cv);
                compiler::CompilerOutput newClassData = cv{"org.qore.test.QoreDynamicTest12"};
                binary fdata = newClassData.file.openInputStream().readAllBytes();
                assertEq(True, fdata.size() > 0);
                object obj = define_class("org/qore/test/QoreDynamicTest12", fdata).newInstance();
                assertEq(M_PI, obj.test());
            }
%ifndef NO_PYTHON
            {
                # compile and execute QoreDynamicTest11.java
                QoreJavaCompiler compiler();
                hash<auto> sources = {
                    "org.qore.test.QoreDynamicTest11": File::readTextFile(get_script_dir() +
                        "/../test/QoreDynamicTest11.java"),
                };
                hash<auto> cv = compiler.compile(sources);
                #printf("%N\n", cv);
                compiler::CompilerOutput newClassData = cv{"org.qore.test.QoreDynamicTest11"};
                binary fdata = newClassData.file.openInputStream().readAllBytes();
                assertEq(True, fdata.size() > 0);
                object obj = define_class("org/qore/test/QoreDynamicTest11", fdata).newInstance();
                assertEq(ENV.PATH.split(":"), obj.test());
            }
            {
                # compile and execute QoreDynamicTest10.java
                QoreJavaCompiler compiler();
                hash<auto> sources = {
                    "org.qore.test.QoreDynamicTest10": File::readTextFile(get_script_dir() +
                        "/../test/QoreDynamicTest10.java"),
                };
                hash<auto> cv = compiler.compile(sources);
                #printf("%N\n", cv);
                compiler::CompilerOutput newClassData = cv{"org.qore.test.QoreDynamicTest10"};
                binary fdata = newClassData.file.openInputStream().readAllBytes();
                assertEq(True, fdata.size() > 0);
                object obj = define_class("org/qore/test/QoreDynamicTest10", fdata).newInstance();
                assertEq("test", obj.test("<xml><a>test</a></xml>", "a"));
            }
            if (True) return;

            {
                # compile and execute QoreDynamicTest9.java
                QoreJavaCompiler compiler();
                hash<auto> sources = {
                    "org.qore.test.QoreDynamicTest9": File::readTextFile(get_script_dir() +
                        "/../test/QoreDynamicTest9.java"),
                };
                hash<auto> cv = compiler.compile(sources);
                #printf("%N\n", cv);
                compiler::CompilerOutput newClassData = cv{"org.qore.test.QoreDynamicTest9"};
                binary fdata = newClassData.file.openInputStream().readAllBytes();
                assertEq(True, fdata.size() > 0);
                object obj = newClassData.cls.newInstance();
                assertEq("{\"a\": 1}", obj.test({"a": 1}));
            }
%endif

            {
                # compile and execute QoreDynamicTest8.java
                QoreJavaCompiler compiler();
                hash<auto> sources = {
                    "org.qore.test.QoreDynamicTest8": File::readTextFile(get_script_dir() + "/../test/QoreDynamicTest8.java"),
                };
                hash<auto> cv = compiler.compile(sources);
                #printf("%N\n", cv);
                compiler::CompilerOutput newClassData = cv{"org.qore.test.QoreDynamicTest8"};
                binary fdata = newClassData.file.openInputStream().readAllBytes();
                assertEq(True, fdata.size() > 0);
                object obj = newClassData.cls.newInstance();
                assertEq("test", obj.test());
                assertEq("y", obj.test2());
                assertEq("y", obj.test3());
                assertEq("z", obj.test4());
                assertEq("z", obj.test5());
            }

            {
                # compile and execute QoreDynamicTest7.java
                QoreJavaCompiler compiler();
                compiler::CompilerOutput newClassData = compiler.compile("org.qore.test.QoreDynamicTest7",
                    File::readTextFile(get_script_dir() + "/../test/QoreDynamicTest7.java"));
                binary fdata = newClassData.file.openInputStream().readAllBytes();
                assertEq(True, fdata.size() > 0);
                reflect::Method m = newClassData.cls.getMethod("testA");
                auto rc = m.invoke();
                on_error printf("rc: %N\n", rc);
                assertEq("object<RecA>", rc.fullType());
                m = newClassData.cls.getMethod("testB");
                rc = m.invoke();
                assertEq("object<RecB>", rc.fullType());
                m = newClassData.cls.getMethod("testC");
                rc = m.invoke();
                assertEq("object<RecC>", rc.fullType());
            }

            {
                lang::Class seqClass = load_class("qore/Qore/Thread/Sequence");
                object obj = seqClass.getDeclaredConstructor().newInstance();
                assertEq("Sequence", obj.className());
                obj.next();
                assertEq(1, obj.next());

                obj = seqClass.getDeclaredConstructor(Long::TYPE).newInstance(2);
                obj.next();
                assertEq(3, obj.next());
            }

            {
                # compile and execute QoreDynamicTest.java
                QoreJavaCompiler compiler();
                compiler::CompilerOutput newClassData = compiler.compile("org.qore.test.QoreDynamicTest",
                    File::readTextFile(get_script_dir() + "/QoreDynamicTest.java"));
                binary fdata = newClassData.file.openInputStream().readAllBytes();
                assertGt(0, fdata.size());
                reflect::Method m = newClassData.cls.getMethod("test0");
                assertEq(1, m.invoke());
                m = newClassData.cls.getMethod("test1", Long::TYPE);
                assertEq(11, m.invoke(NOTHING, 10));
                m = newClassData.cls.getMethod("test2");
                assertEq("test", m.invoke());

                m = newClassData.cls.getMethod("test3");
                StringOutputStream stream = m.invoke();
                assertEq("java test", stream.getData());

                m = newClassData.cls.getMethod("test4");
                assertEq(1, m.invoke());
            }

            {
                Program p(PO_NEW_STYLE);
                p.setScriptPath(get_script_path());
                p.importClass("DynamicTest");
                p.parse("
auto sub test() {
    QoreJavaCompiler compiler();
    compiler::CompilerOutput newClassData = compiler.compile('org.qore.test.QoreDynamicTest',
        File::readTextFile(get_script_dir() + '/QoreDynamicTest.java'));
    reflect::Method m = newClassData.cls.getMethod('test4');
    return m.invoke();
}", "test");
                auto i = p.callFunction("test");
                assertEq(1, i);
            }

            {
                # compile and execute QoreDynamicTest2.java
                QoreJavaCompiler compiler();
                DiagnosticCollector diags();
                on_error
                    map printf("%s:%d: %s\n", $1.getSource().getName(), $1.getLineNumber(), $1.getMessage()),
                        diags.getDiagnostics();

                compiler::CompilerOutput newClassData = compiler.compile("org.qore.test.QoreDynamicTest2",
                    new String(File::readTextFile(get_script_dir() + "/QoreDynamicTest2.java")),
                    diags, ());
                binary fdata = newClassData.file.openInputStream().readAllBytes();
                assertGt(0, fdata.size());
                reflect::Method m = newClassData.cls.getMethod("test0");
                auto i = m.invoke();
                assertEq("QoreIteratorTest", i.className());
                assertTrue(i instanceof AbstractIterator);
                list<auto> l = map $1, i;
                assertEq(("one", "two", "three"), l);
            }

            {
                # compile and execute QoreDynamicTest3.java
                QoreJavaCompiler compiler();
                compiler::CompilerOutput newClassData = compiler.compile("org.qore.test.QoreDynamicTest3",
                    File::readTextFile(get_script_dir() + "/QoreDynamicTest3.java"));
                binary fdata = newClassData.file.openInputStream().readAllBytes();
                assertGt(0, fdata.size());
                reflect::Method m = newClassData.cls.getMethod("test0", load_class("java/lang/String"));
                auto h = m.invoke(NOTHING, get_script_path());
                on_error printf("h: %N\n", h);
                assertEq("hash<auto>", h.fullType());
                assertEq("REGULAR", h.type);
            }

            {
                # compile and execute QoreDynamicTest4.java
                QoreJavaCompiler compiler();
                compiler::CompilerOutput newClassData = compiler.compile("org.qore.test.QoreDynamicTest4",
                    File::readTextFile(get_script_dir() + "/QoreDynamicTest4.java"));
                binary fdata = newClassData.file.openInputStream().readAllBytes();
                assertGt(0, fdata.size());
                reflect::Method m = newClassData.cls.getMethod("test0", load_class("java/lang/String"));
                auto stream = m.invoke(NOTHING, "testing");
                on_error printf("h: %N\n", stream);
                assertEq("object<QoreDynamicTest4>", stream.fullType());
                assertEq("testing", stream.getData());
            }

            {
                # compile and execute QoreDynamicTest5.java
                QoreJavaCompiler compiler();
                compiler::CompilerOutput newClassData = compiler.compile("org.qore.test.QoreDynamicTest5",
                    File::readTextFile(get_script_dir() + "/QoreDynamicTest5.java"));
                binary fdata = newClassData.file.openInputStream().readAllBytes();
                assertGt(0, fdata.size());
                reflect::Method m = newClassData.cls.getMethod("test0", load_class("org/qore/jni/Hash"));
                string url = "https://localhost:8001/";
                auto rc = m.invoke(NOTHING, {"url": url});
                on_error printf("h: %N\n", rc);
                assertEq("object<RestClient>", rc.fullType());
                assertEq(url, rc.getURL());
            }

            {
                # compile and execute QoreDynamicTest6.java
                QoreJavaCompiler compiler();
                compiler::CompilerOutput newClassData = compiler.compile("org.qore.test.QoreDynamicTest6",
                File::readTextFile(get_script_dir() + "/../test/QoreDynamicTest6.java"));
                binary fdata = newClassData.file.openInputStream().readAllBytes();
                assertEq(True, fdata.size() > 0);
                reflect::Method m = newClassData.cls.getMethod("test0", load_class("org/qore/jni/Hash"));
                string url = "https://localhost:8001/";
                auto rc = m.invoke(NOTHING, {"url": url});
                on_error printf("h: %N\n", rc);
                assertEq("object<XmlRpcClient>", rc.fullType());
                assertEq(url, rc.getURL());
            }
        } catch (hash<ExceptionInfo> ex) {
            if (ex.arg.typeCode() == NT_OBJECT) {
                object arg = ex.arg;
                while (arg && arg.hasCallableMethod("getCause")) {
                    *object next = arg.getCause();
                    if (next) {
                        arg = next;
                    } else {
                        break;
                    }
                }
                printf("%s\n", arg.toString());
                arg.printStackTrace();
            }
            printf("%s\n", get_exception_string(ex));
            rethrow;
        }
    }

    argTest() {
        {
            Program p(PO_NEW_STYLE);
            p.setScriptPath(get_script_path());
            p.importClass("ArgTest");

            QoreJavaCompiler compiler();
            hash<auto> sources = {
                "org.qore.test.QoreArgTest": "
package org.qore.test;

import qore.ArgTest;

public class QoreArgTest extends ArgTest {
    public QoreArgTest() throws Throwable {
        super();
    }

    public Object test1() throws Throwable {
        return staticGet(\"1\");
    }

    public Object test2() throws Throwable {
        return get(\"2\");
    }
}",
            };
            hash<auto> cv = compiler.compile(sources);
            #printf("%N\n", cv);
            compiler::CompilerOutput newClassData = cv{"org.qore.test.QoreArgTest"};
            binary fdata = newClassData.file.openInputStream().readAllBytes();
            assertEq(True, fdata.size() > 0);
            object obj = define_class("org/qore/test/QoreArgTest", fdata).newInstance();
            assertEq(("1",), obj.test1());
            assertEq(("2",), obj.test2());
        }
    }

    classCompatTest() {
        ArrayList l();;
        assertTrue(l instanceof Iterable);
    }

    testCode() {
        int i;
        code qcode = sub (int val) {
            i += val;
        };

        QoreJavaApiTest::testCode(qcode, 2);
        assertEq(2, i);
        QoreJavaApiTest::testCode(qcode, 0);
        assertEq(2, i);
        QoreJavaApiTest::testCode(qcode, -1);
        assertEq(1, i);
        QoreJavaApiTest::testCode(\testCodeMethod(), 3);
        assertEq(3, code_test_var);
        QoreJavaApiTest::testCode(\testCodeMethod(), 0);
        assertEq(3, code_test_var);
        QoreJavaApiTest::testCode(\testCodeMethod(), -1);
        assertEq(2, code_test_var);
    }

    static testCodeMethod(int val) {
        code_test_var += val;
    }

    smtpClientTest() {
        # test the java version of the object
        smtpclient::SmtpClient smtp("smtp://user:pass@host.com");
        assertEq("host.com:25", smtp.getTarget());
        smtp = new smtpclient::SmtpClient("user:pass@x:23");
        assertEq("x:23", smtp.getTarget());
        smtp = new smtpclient::SmtpClient("smtp://user:pass@x1:23");
        assertEq("x1:23", smtp.getTarget());
        smtp = new smtpclient::SmtpClient("smtp://user:pass@x1");
        assertEq("x1:25", smtp.getTarget());
        smtp = new smtpclient::SmtpClient("smtp://user:pass@socket=%2Ftmp%2Fsock");
        assertEq("/tmp/sock", smtp.getTarget());
        assertThrows("SMTPCLIENT-UNKNOWN-PROTOCOL", sub () { new smtpclient::SmtpClient("smtpx://host:23");});
        assertThrows("SMTPCLIENT-UNKNOWN-PROTOCOL", sub () { new smtpclient::SmtpClient("scheme://host");});
    }

    mailMessageTest() {
        {
            string body = "some body";

            # test the java version of the object
            mailmessage::Message msg(Sender, Subject);
            msg.setBody(body);

            msg.addTO(To);

            msg.attach("foo.txt", MimeTypeText, "lorem ipsum", EncBase64);
            string r = msg.serialize();

            string refstr = "From: foo@bar.cz\r
To: target@bar.cz\r
Subject: foo bar\r
MIME-Version: 1.0\r
Content-Type: multipart/mixed; boundary=MjAxNjAxMjIxMTQ4MDg\r
\r
This is a MIME multipart message\r
--MjAxNjAxMjIxMTQ4MDg\r
Content-Type: text/plain; charset=UTF-8\r
Content-Disposition: inline\r
Content-Transfer-Encoding: quoted-printable\r
\r
some body\r
--MjAxNjAxMjIxMTQ4MDg\r
Content-Type: text/plain; name=\"foo.txt\"; charset=UTF-8\r
Content-Disposition: attachment; filename=\"foo.txt\"\r
Content-Transfer-Encoding: base64\r
\r
bG9yZW0gaXBzdW0=\r
--MjAxNjAxMjIxMTQ4MDg--\r
";
            # get boundary from generated message
            string boundary = (r =~ x/boundary=(\w+)/)[0];
            r = replace(r, boundary, "MjAxNjAxMjIxMTQ4MDg");
            assertEq(refstr, r);
        }
        {
            # test the java version of the object
            mailmessage::Message msg(Sender, Subject);
            msg.setBody("body");
            msg.addTO(To);

            msg.attach("foo.txt", MimeTypeText, "lorem ipsum", EncDefault);
            string r = msg.serialize();

            string refstr = "From: foo@bar.cz\r
To: target@bar.cz\r
Subject: foo bar\r
MIME-Version: 1.0\r
Content-Type: multipart/mixed; boundary=MjAxNjAxMjIxMTQ4MDg\r
\r
This is a MIME multipart message\r
--MjAxNjAxMjIxMTQ4MDg\r
Content-Type: text/plain; charset=UTF-8\r
Content-Disposition: inline\r
Content-Transfer-Encoding: quoted-printable\r
\r
body\r
--MjAxNjAxMjIxMTQ4MDg\r
Content-Type: text/plain; name=\"foo.txt\"; charset=UTF-8\r
Content-Disposition: attachment; filename=\"foo.txt\"\r
Content-Transfer-Encoding: quoted-printable\r
\r
lorem ipsum\r
--MjAxNjAxMjIxMTQ4MDg--\r
";

            # get boundary from generated message
            string boundary = (r =~ x/boundary=(\w+)/)[0];
            r = replace(r, boundary, "MjAxNjAxMjIxMTQ4MDg");
            assertEq(refstr.split("\r\n"), r.split("\r\n"));
            #assertEq(refstr, r);
        }
        {
            # test issue #2360
            # test the java version of the object
            mailmessage::Message msg(Sender, Subject);
            msg.addBody("body");
            msg.addTO(To);
            string r = msg.serialize();
            assertRegex("Content-Transfer-Encoding: quoted-printable", r);
        }
    }

    restClientTest() {
        Logger logger("test", LoggerLevel::getLevelInfo());
        if (m_options.verbose > 2) {
            logger.addAppender(new TestAppender());
        }
        hash<HttpServerOptionInfo> http_opts = <HttpServerOptionInfo>{
            "logger": logger,
            "debug": True,
        };
        HttpServer httpserver(http_opts);
        on_exit httpserver.stop();
        httpserver.setHandler("/api_text", "/api_text", MimeTypeText, new SimpleStringHandler(MimeTypeText, TEXT));
        httpserver.setHandler("/api_bin", "/api_bin", MimeTypeOctetStream, new SimpleStringHandler(MimeTypeOctetStream));
        int port = httpserver.addListener(<HttpListenerOptionInfo>{"service": 0}).port;

        restclient::RestClient rest({"url": "http://localhost:" + port});
        assertThrows("REST-RESPONSE-ERROR", \rest.restGet(), ("/api_text", NOTHING, {"Do-Error": True}));
        rest.setErrorPassthru(True);
        hash<auto> msg = rest.restGet("/api_text", NOTHING, {"Do-Error": True});
        assertEq(404, msg.status_code);
        assertEq("test error", msg.body);

        auto ret;
        rest.setSerialization("text");
        ret = rest.restPost("/api_bin", <abcd>);
        #printf("ret: %y\n", ret);
        assertEq(<abcd>, binary(ret.body));
        assertEq(MimeTypeOctetStream, ret."content-type");

        rest.setSerialization("bin");
        ret = rest.restPost("/api_bin", <abcd>);
        #printf("ret: %y\n", ret);
        assertEq(<abcd>, binary(ret.body));
        assertEq(MimeTypeOctetStream, ret."content-type");
    }

    objectLifecycleTest() {
        hash<string, object> object_cache;
        code callback = sub (object obj) {
            # save object in object cache, so it doesn't go out of scope
            object_cache{obj.uniqueHash()} = obj;
        };
        set_save_object_callback(callback);
        on_exit set_save_object_callback();
        assertEq("test-y", QoreJavaApiTest::objectLifecycleTest("test"));
        #printf("object_cache: %N\n", object_cache);
        assertEq(1, object_cache.size());

        object obj = QoreJavaApiTest::testObjectTest();
        assertEq(2, object_cache.size());
        remove obj;
    }

    qoreExceptionTest() {
        try {
            QoreJavaApiTest::testException("T1", "desc1");
            assertTrue(False);
        } catch (hash<ExceptionInfo> ex) {
            assertEq("T1", ex.err);
            assertEq("desc1", ex.desc);
            assertNothing(ex.arg);
            assertEq("QoreJavaApiTest.java", ex.file);
            # don't test the exact line, as it will change when the source file is edited
            assertGt(0, ex.line);
            assertEq(ET_System, ex.type);
            assertEq("Java", ex.lang);
            assertEq("QoreJavaApiTest::testException", (map $1.function, ex.callstack, $1.function == "QoreJavaApiTest::testException")[0]);
        }

        try {
            QoreJavaApiTest::testException("T1", "desc1", 1);
            assertTrue(False);
        } catch (hash<ExceptionInfo> ex) {
            assertEq("T1", ex.err);
            assertEq("desc1", ex.desc);
            assertEq(1, ex.arg);
            assertEq("QoreJavaApiTest.java", ex.file);
            # don't test the exact line, as it will change when the source file is edited
            assertGt(0, ex.line);
            assertEq(ET_System, ex.type);
            assertEq("Java", ex.lang);
            assertEq("QoreJavaApiTest::testException", (map $1.function, ex.callstack, $1.function == "QoreJavaApiTest::testException")[0]);
        }

        try {
            QoreJavaApiTest::testException("T1", "desc1", 2019-02-19);
            assertTrue(False);
        } catch (hash<ExceptionInfo> ex) {
            assertEq("T1", ex.err);
            assertEq("desc1", ex.desc);
            assertEq(2019-02-19, ex.arg);
            assertEq("QoreJavaApiTest.java", ex.file);
            # don't test the exact line, as it will change when the source file is edited
            assertGt(0, ex.line);
            assertEq(ET_System, ex.type);
            assertEq("Java", ex.lang);
            assertEq("QoreJavaApiTest::testException", (map $1.function, ex.callstack, $1.function == "QoreJavaApiTest::testException")[0]);
        }

        Mutex m();
        try {
            QoreJavaApiTest::testException("T1", "desc1", m);
            assertTrue(False);
        } catch (hash<ExceptionInfo> ex) {
            assertEq("T1", ex.err);
            assertEq("desc1", ex.desc);
            assertEq(m, ex.arg);
            assertEq("QoreJavaApiTest.java", ex.file);
            # don't test the exact line, as it will change when the source file is edited
            assertGt(0, ex.line);
            assertEq(ET_System, ex.type);
            assertEq("Java", ex.lang);
            assertEq("QoreJavaApiTest::testException", (map $1.function, ex.callstack, $1.function == "QoreJavaApiTest::testException")[0]);
        }
    }

    callStackTest() {
        list<auto> l = QoreJavaApiTest::getCallStack();
        assertEq(Type::Hash, l[0].type());
        try {
            QoreJavaApiTest::throwTest();
            assertTrue(False);
        } catch (hash<ExceptionInfo> ex) {
            assertEq("Throwable", ex.arg.className());
        }
    }

    closureTest() {
        code c = QoreJavaApiTest::getClosure1();
        assertEq("closure-1", c(1));
        c = QoreJavaApiTest::getClosure2();
        assertNothing(c(2));
        assertThrows("JNI-ERROR", \QoreJavaApiTest::getClosure3());
    }

    exceptionStackTest() {
        try {
            QoreJavaApiTest::callFunctionTest("does_not_exist");
            assertTrue(False);
        } catch (hash<ExceptionInfo> ex) {
            assertEq("Java", ex.callstack[0].lang);
            # Java native methods are "builtin"
            assertEq("builtin", ex.callstack[0].type);
            assertEq("Java", ex.callstack[1].lang);
            # normal (non-native) Java methods are "user"
            assertEq("user", ex.callstack[1].type);
        }

        # issue #4030
        try {
            QoreJavaApiTest::nestedExceptionTest();
            assertTrue(False);
        } catch (hash<ExceptionInfo> ex) {
            #printf("%s\n", get_exception_string(ex));
            assertEq("org.qore.jni.test.QoreJavaApiTest.throwException", ex.callstack[0].function);
            assertEq("org.qore.jni.test.QoreJavaApiTest.nestedExceptionTest", ex.callstack[1].function);
        }
    }

    qoreJavaApiTest() {
        DatasourcePool dsp = getDatasourcePool();
        on_exit remove_thread_data("_jni_save");
        lang::DatasourcePool jdsp(dsp);

        # drop the table unconditionally in case it exists from a failed test
        try {
            on_error jdsp.rollback();
            on_success jdsp.commit();

            jdsp.exec("drop table test_table_1");
        } catch (hash<ExceptionInfo> ex) {
            # this block intentionally left blank
        }

        {
            sqlutil::Table table(jdsp, "test_table_1");
            hash<auto> column = {
                "qore_type": "integer",
            };
            table.addColumn("id", column, False);
            column = {
                "qore_type": "string",
                "size": 50,
            };
            table.addColumn("string", column, False);
            column = {
                "qore_type": "date",
            };
            table.addColumn("modified", column, False);
            table.create();
            table.commit();
            on_exit {
                table.drop();
                table.commit();
            }

            date now = now_us();
            lang::AbstractSQLStatement stmt = jdsp.getSQLStatement();
            stmt.prepare("insert into test_table_1 (id, string, modified) values(%v, %v, %v)");
            stmt.bind((1, "hello", now));
            stmt.exec();
            stmt.commit();

            assertEq(1, table.rowCount());

            hash<auto> sh = {
                "where": {
                    "id": 1,
                },
            };
            hash<auto> row = table.selectRow(sh);
            assertEq(1, row.id);
            assertEq("hello", row.string);
            assertEq(now, row.modified);
        }

        object table = QoreJavaLangApiTest::createTable(dsp);
        sqlutil::Table local_table = new sqlutil::Table(table.getQoreObject());
        #sqlutil::AbstractTable table = QoreJavaLangApiTest::createTable(dsp);
        on_exit {
            QoreJavaLangApiTest::dropTable(table);
        }
        try {
            assertTrue(QoreJavaLangApiTest::testTable(table));

            list<auto> l = QoreJavaLangApiTest::testBulkInsert(table);
            assertEq({"id": 2, "string": "str"}, l[0] - "modified");
            assertEq({"id": 2, "string": "str"}, l[1][0] - "modified");
            assertEq(Type::String, l[2][0].type());

            hash<auto> h = QoreJavaLangApiTest::testBulkUpsert(table);
            assertEq({"id": 2, "string": "new-str"}, h - "modified");

            assertEq(1, local_table.update({"string": "new-str-2"}, {"id": 2}));
            assertEq("new-str-2", local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as("string", "str"),
                "where": {"id": 2},
            }).str);
            assertEq("x-new-str-2", local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as(sqlutil::AbstractTable::cop_prepend("string", "x-"), "str"),
                "where": {"id": 2},
            }).str);
            assertEq("new-str-2-x", local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as(sqlutil::AbstractTable::cop_append("string", "-x"), "str"),
                "where": {"id": 2},
            }).str);
            assertEq(1, local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as(sqlutil::AbstractTable::cop_value(1), "val"),
                "where": {"id": 2},
            }).val);
            assertEq(2, local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as(sqlutil::AbstractTable::cop_min("id"), "val"),
                "where": {"id": 2},
            }).val);
            assertEq(2, local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as(sqlutil::AbstractTable::cop_max("id"), "val"),
                "where": {"id": 2},
            }).val);
            assertEq(2, local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as(sqlutil::AbstractTable::cop_distinct("id"), "val"),
                "where": {"id": 2},
            }).val);
            assertEq(2, local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as(sqlutil::AbstractTable::cop_avg("id"), "val"),
                "where": {"id": 2},
            }).val);
            assertEq(2, local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as(sqlutil::AbstractTable::cop_sum("id"), "val"),
                "where": {"id": 2},
            }).val);
            assertEq(1, local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as(sqlutil::AbstractTable::cop_count("id"), "val"),
                "where": {"id": 2},
            }).val);
            assertEq(2, local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as(sqlutil::AbstractTable::cop_minus("id", cop_value(0)), "val"),
                "where": {"id": 2},
            }).val);
            assertEq(2, local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as(sqlutil::AbstractTable::cop_plus("id", cop_value(0)), "val"),
                "where": {"id": 2},
            }).val);
            assertEq(2, local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as(sqlutil::AbstractTable::cop_divide("id", cop_value(1)), "val"),
                "where": {"id": 2},
            }).val);
            assertEq(2, local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as(sqlutil::AbstractTable::cop_multiply("id", cop_value(1)), "val"),
                "where": {"id": 2},
            }).val);
            date mod = local_table.selectRow({"columns": "modified", "where": {"id": 2}}).modified;
            assertEq(mod.format("YYYY"), local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as(sqlutil::AbstractTable::cop_year("modified"), "val"),
                "where": {"id": 2},
            }).val);
            assertEq(mod.format("YYYY-MM"), local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as(sqlutil::AbstractTable::cop_year_month("modified"), "val"),
                "where": {"id": 2},
            }).val);
            assertEq(mod.format("YYYY-MM-DD"), local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as(sqlutil::AbstractTable::cop_year_day("modified"), "val"),
                "where": {"id": 2},
            }).val);
            assertEq(2, local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as(sqlutil::AbstractTable::cop_coalesce("id", cop_value(1)), "val"),
                "where": {"id": 2},
            }).val);
            assertEq("n", local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as(sqlutil::AbstractTable::cop_substr("string", 1, 1), "val"),
                "where": {"id": 2},
            }).val);
            assertEq(9, local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as(sqlutil::AbstractTable::cop_length("string"), "val"),
                "where": {"id": 2},
            }).val);
            assertEq(date(mod.format("YYYY-01-01")), local_table.selectRow({
                "columns": sqlutil::AbstractTable::cop_as(sqlutil::AbstractTable::cop_trunc_date("modified", sqlutil::AbstractTable::DT_YEAR), "val"),
                "where": {"id": 2},
            }).val);

            # must be the last data tests for the table
            assertEq(2, local_table.del());

            QoreJavaLangApiTest::doTests();

            # issue #3545: test data provider API
            DbTableDataProvider provider(local_table.getQoreObject().getTable());
            QoreJavaLangApiTest::testDataProvider(provider);
        } catch (hash<ExceptionInfo> ex) {
            local_table.rollback();

            if (ex.arg.typeCode() == NT_OBJECT) {
                object arg = ex.arg;
                while (arg && arg.hasCallableMethod("getCause")) {
                    *object next = arg.getCause();
                    if (next) {
                        arg = next;
                    } else {
                        break;
                    }
                }
                arg.printStackTrace();
            }
            printf("%s\n", get_exception_string(ex));
            rethrow;
        }
    }

    AbstractDatasource getDatasourcePool() {
        *string connstr = m_options.connstr
            ?? ENV.QORE_DB_CONNSTR
            ?? ENV.QORE_DB_CONNSTR_PGSQL
            ?? ENV.QORE_DB_CONNSTR_ORACLE
            ?? ENV.QORE_DB_CONNSTR_MYSQL
            ?? ENV.QORE_DB_CONNSTR_FREETDS;
        if (!connstr) {
            testSkip("no DB connection string available");
        }
        try {
            return new DatasourcePool(connstr);
        } catch (hash<ExceptionInfo> ex) {
            testSkip(sprintf("failed to open %y: %s: %s", connstr, ex.err, ex.desc));
        }
    }

    callStaticMethodTest() {
        auto hm = QoreJavaApiTest::callStaticMethodTest();
        assertEq("hash<auto>", hm.fullType());

        hm = QoreJavaApiTest::callStaticMethodTest2();
        assertEq("hash<auto>", hm.fullType());
    }

    hashMapTest() {
        {
            auto l = QoreJavaApiTest::testObject6();
            assertEq(Type::Hash, l[0].type());
        }

        hash<auto> h0 = {
            "a": 1,
            "b": "two",
        };

        {
            hash<auto> h1 = QoreJavaApiTest::testObject7(h0);
            assertEq(1, h1.size());
            assertEq(h0 - "a", h1);
        }

        {
            list<hash<auto>> l0= (
                h0,
                h0,
            );

            auto l1 = QoreJavaApiTest::testObject8(l0);
            assertEq(l0, l1);

            l1 = QoreJavaApiTest::testObject9(l0);
            assertEq(l0, l1);
        }

        {
            TestClass test();
            auto l = QoreJavaApiTest::testObject10(test);
            assertEq(test.getListOfHashes(), l);
        }
    }

    numberTest() {
        string num_str = M_PIn.toString();
        number val = QoreJavaApiTest::testObject5(num_str);
        # must convert to float
        assertNumberEq(M_PIn, val);
        assertNumberEq(M_PIn, QoreJavaApiTest::testObject5(M_PIn));
    }

    objectTest() {
        TestClass t();
        assertEq(True, QoreJavaApiTest::testObject4(t, "TestClass"));
        assertEq("test-x", QoreJavaApiTest::testObject1(t, "test"));
        assertEq("mem", QoreJavaApiTest::testObject2(t));
        assertEq(t, QoreJavaApiTest::testObject3(t));
        assertEq("TestClass", QoreJavaApiTest::testObject11(t));

        auto v = QoreJavaApiTest::testObject12();
        assertThrows("OBJECT-ALREADY-DELETED", \v.getString(), "str");
        delete_thread_data("_jni_save");
        v = QoreJavaApiTest::testObject13();
        assertEq("str-x", v.getString("str"));
        assertEq((v,), get_thread_data("_jni_save"));
        hash<auto> td = remove_thread_data("_jni_save");
        assertEq((v,), td._jni_save);
        remove td;
        remove v;
        v = QoreJavaApiTest::testObject12();
        assertThrows("OBJECT-ALREADY-DELETED", \v.getString(), "str");

        save_thread_data("_jni_save", "my-key");
        v = QoreJavaApiTest::testObject13();
        assertEq("str-x", v.getString("str"));
        assertEq((v,), get_thread_data("my-key"));
        td = remove_thread_data("my-key");
        assertEq((v,), td."my-key");
        remove td;
        remove v;
        v = QoreJavaApiTest::testObject12();
        assertThrows("OBJECT-ALREADY-DELETED", \v.getString(), "str");

        v = QoreJavaApiTest::testObject13();
        assertEq("str-x", v.getString("str"));
        assertEq((v,), get_thread_data("my-key"));
        td = remove_thread_data("my-key");
        assertEq((v,), td."my-key");
        remove td;
        remove v;
        v = QoreJavaApiTest::testObject12();
        assertThrows("OBJECT-ALREADY-DELETED", \v.getString(), "str");

        t = new TestClass();
        string val = QoreJavaApiTest::testObject14(t);
        assertEq("default-x", val);

        # test new object creation and saving a strong reference in a Java thread
        assertEq("default-y", QoreJavaApiTest::testObject15());
        # ensure that thread-local data created from Java threads is destroyed when
        # the Java thread terminates
        assertEq(2, TestClass2::cnt);
    }

    dateTest() {
        date now = now_us();
        string date_str = now.format("YYYY-MM-DDTHH:mm:SS.xxZ");
        date d = ZonedDateTime::parse(new String(date_str));
        assertEq(now, d);

        d = QoreJavaApiTest::dateTest(now);
        # the java API returns a date with the same UTC offset, so we have to use 48h instead of 2D
        assertEq(now - 48h, d);

        date rt = P1Y2M3DT1H2M3S4u;
        list<int> l = cast<list<int>>(QoreJavaApiTest::testDate1(rt));
        assertEq((1,2,3,1,2,3,4), l);
        assertEq(rt, QoreJavaApiTest::testDate2(rt));
    }

    defineClassTest() {
        assertThrows("JNI-ERROR", "java.lang.ClassFormatError", \jni::define_class(), ("test", <abcd>));

        # issue #3023: create class from bytecode
        lang::Class jcls = define_class("Test", TestClass1ByteCode);
        assertEq("Test", jcls.getName());
        # create object from dynamically-created class
        object obj = jcls.getDeclaredConstructor().newInstance();
        # test method call
        assertEq("test", obj.get());

        {
            Program p(PO_NEW_STYLE);
            p.issueModuleCmd("jni", "define-class my/test/Test2 " + TestClass2ByteCode.toBase64());
            #p.parse("%requires reflection\nlist<auto> sub test() { return Class::findAllRegex('Test2'); }", "");
            #map printf("%y\n", $1.getPathName()), p.callFunction("test");
            p.parse("Test2 sub test() { return new Test2(); }", "");
            obj = p.callFunction("test");
            assertEq("Test2", obj.get());
        }
    }

    issue2950() {
        int i = 0;
        Program p(PO_NEW_STYLE);
        p.parse("list<auto> sub get_closure() {
    Counter c(1);
    return (sub (Method m, *list args) { }, c);
}
        ", "");

        (code closure1, Counter c) = p.callFunction("get_closure");
        delete p;

        code closure2 = sub(Method m, *list args) { ++i; c.dec(); };

        QoreInvocationHandler h1(closure1);
        QoreInvocationHandler h2(closure2);
        lang::Class runnableClass = load_class("java/lang/Runnable");
        QoreJavaApiTest::threadTest(implement_interface(h1, runnableClass), implement_interface(h2, runnableClass));
        c.waitForZero();
        assertEq(1, i);
    }

    testQoreJavaApi() {
        auto hm = QoreJavaApiTest::callFunctionTest();
        assertEq("hash<auto>", hm.fullType());

        try {
            QoreJavaApiTest::throwTest();
            assertTrue(False);
        } catch (hash<ExceptionInfo> ex) {
            assertEq("QoreJavaApiTest.java", ex.file);
            assertEq(93, ex.line);
        }

        try {
            # test Hash APIs
            assertEq(True, QoreJavaApiTest::testHashBool({"a": True}, "a"));
            assertEq(1, QoreJavaApiTest::testHashInt({"a": new Integer(1)}, "a"));
            assertEq(1.0, QoreJavaApiTest::testHashDouble({"a": 1.0}, "a"));
            assertEq(2020-03-28, QoreJavaApiTest::testHashADate({"a": 2020-03-28}, "a"));
            assertEq(<abcdef>, QoreJavaApiTest::testHashBinary({"a": <abcdef>}, "a"));
            assertEq("test", QoreJavaApiTest::testHashString({"a": "test"}, "a"));
            assertEq((1, "two", True), QoreJavaApiTest::testHashList({"a": (1, "two", True)}, "a"));
            assertEq({"a": 1, "b": "two"}, QoreJavaApiTest::testHashListIterator({"a": (1,), "b": ("two",)}));
            assertEq(True, QoreJavaApiTest::testHashAsBool({"a": 1}, "a"));
            assertEq(True, QoreJavaApiTest::testHashAsBool({"a": "true"}, "a"));
            assertEq(True, QoreJavaApiTest::testHashAsBool({"a": "1"}, "a"));
            assertEq(1, QoreJavaApiTest::testHashAsInt({"a": 1.0}, "a"));
            assertEq(1, QoreJavaApiTest::testHashAsByte({"a": True}, "a"));
            assertEq(1, QoreJavaApiTest::testHashAsShort({"a": True}, "a"));
            assertEq(1, QoreJavaApiTest::testHashAsInt({"a": True}, "a"));
            assertEq(1, QoreJavaApiTest::testHashAsLong({"a": True}, "a"));
            assertEq(1.0, QoreJavaApiTest::testHashAsFloat({"a": True}, "a"));
            assertEq(1.0, QoreJavaApiTest::testHashAsDouble({"a": True}, "a"));
            assertEq(1.0, QoreJavaApiTest::testHashAsDouble({"a": 1}, "a"));
            assertEq("1", QoreJavaApiTest::testHashAsString({"a": 1}, "a"));
        } catch (hash<ExceptionInfo> ex) {
            if (ex.arg.typeCode() == NT_OBJECT) {
                object arg = ex.arg;
                while (arg && arg.hasCallableMethod("getCause")) {
                    *object next = arg.getCause();
                    if (next) {
                        arg = next;
                    } else {
                        break;
                    }
                }
                printf("%s\n", arg.toString());
                arg.printStackTrace();
            }
            printf("%s\n", get_exception_string(ex));
            rethrow;
        }

        QoreJavaApiTest::testHash1();
        assertEq({"a": 1}, TestHelper::getHash());
        TestHelper::setHash({});
        assertEq({}, TestHelper::getHash());
        QoreJavaApiTest::testHash2();
        assertEq({"a": 1}, TestHelper::getHash());
    }

    testJniClasses() {
        # get the Math class
        lang::Class mathClass = load_class("java/lang/Math");
        # get the Math.acos() static method
        reflect::Method acosMethod = mathClass.getDeclaredMethod("acos", Double::TYPE);

        # get the StringBuffer class
        lang::Class stringBufferClass = load_class("java/lang/StringBuffer");
        # get the StringBuffer constructor with no arguments
        Constructor stringBufferConstructor = stringBufferClass.getConstructor();
        # get StringBuffer.append(double)
        reflect::Method appendDoubleMethod = stringBufferClass.getDeclaredMethod("append", Double::TYPE);
        # get StringBuffer.toString()
        reflect::Method toStringMethod = stringBufferClass.getDeclaredMethod("toString");
        # create a StringBuffer object
        Object buf = stringBufferConstructor.newInstance(());

        # write to our buffer
        appendDoubleMethod.invoke(buf, 1.0);
        appendDoubleMethod.invoke(buf, new Double(1.0));
        appendDoubleMethod.invoke(buf, acosMethod.invoke(NOTHING, new Double(-1.0)));
        appendDoubleMethod.invoke(buf, acosMethod.invoke(NOTHING, -1.0));

        assertEq("1.01.03.1415926535897933.141592653589793", toStringMethod.invoke(buf));
    }

    testStaticMethods() {
        try {
            lang::Class clazz = load_class("org/qore/jni/test/StaticMethods");

            # the purpose is to test all possible argument and return value types
            Method set = clazz.getDeclaredMethod("set", Integer::TYPE);
            Method get = clazz.getDeclaredMethod("get");                                       # overloaded
            Method cmp = clazz.getDeclaredMethod("cmp", (Short::TYPE, Long::TYPE));
            Method add = clazz.getDeclaredMethod("add", (Byte::TYPE, Character::TYPE));
            Method get2 = clazz.getDeclaredMethod("get", Boolean::TYPE);                    # overloaded
            Method avg = clazz.getDeclaredMethod("avg", (Byte::TYPE, Byte::TYPE, Byte::TYPE)); # overloaded
            Method max = clazz.getDeclaredMethod("max", (Long::TYPE, Long::TYPE));
            Method avg2 = clazz.getDeclaredMethod("avg", (Float::TYPE, Float::TYPE));          # overloaded
            Method avg3 = clazz.getDeclaredMethod("avg", (Double::TYPE, Double::TYPE));        # overloaded
            Method wrap = clazz.getDeclaredMethod("wrap", Integer::TYPE);
            Method unwrap = clazz.getDeclaredMethod("unwrap", load_class("java/lang/Integer"));
            Method getLongArray = clazz.getDeclaredMethod("getLongArray");
            Method useArray = clazz.getDeclaredMethod("useArray", load_class("[Ljava/lang/Object;"));

            # set() expects one argument
            assertThrows("JNI-ERROR", "java.lang.IllegalArgumentException", sub() { set.invoke(); });

            # get() expects no arguments
            assertThrows("JNI-ERROR", "java.lang.IllegalArgumentException", sub() { get.invoke(NOTHING, 123); });

            # FIXME: why doesn't this fail anymore with Java 12?
            #assertThrows("JNI-ERROR", "?", sub() { get.invoke(123); });

            # cmp() expects two arguments
            assertThrows("JNI-ERROR", "java.lang.IllegalArgumentException", sub() { cmp.invoke(NOTHING, 1); });
            assertThrows("JNI-ERROR", "java.lang.IllegalArgumentException", sub() { cmp.invoke(NOTHING, (1, 2, 3)); });

            # set() has no retval, we test the side effect below using get()
            set.invoke(NOTHING, new Integer(42));

            # get() returns the value previously passed to set()
            assertEq(42, get.invoke());

            # cmp() 'converts' first arg to short and returns true if it is greater than the second argument
            assertTrue(cmp.invoke(NOTHING, (new Short(1000), new Long(-1234567890123))));
            assertTrue(cmp.invoke(NOTHING, (new Short(32767), new Long(1))));
            assertFalse(cmp.invoke(NOTHING, (new Short(32768), new Long(1))));  #the first argument overflows to -32768, which is not greater than 1

            # add() 'converts' first arg to byte (signed 8bit), second arg to char (unsigned 16bit) and adds them together
            assertEq(32768, add.invoke(NOTHING, (new Byte(1), new Character(32767))));
            assertEq(0, add.invoke(NOTHING, (new Byte(36), new Character(65500))));
            assertEq(65530, add.invoke(NOTHING, (new Byte(-5), new Character(-1))));      #-1 is 65535
            assertEq(999, add.invoke(NOTHING, (new Byte(255), new Character(1000))));     #255 is -1

            # get2() throws if called with true, otherwise returns 2^63-1
            assertThrows("JNI-ERROR", sub() { get2.invoke(NOTHING, True); });
            assertEq(0x7FFFFFFFFFFFFFFF, get2.invoke(NOTHING, False));

            # avg() 'converts' all args to byte and returns their average
            assertEq(2, avg.invoke(NOTHING, (new Byte(1), new Byte(2), new Byte(3))));
            assertEq(85, avg.invoke(NOTHING, (new Byte(126), new Byte(2), new Byte(127))));
            assertEq(-43, avg.invoke(NOTHING, (new Byte(128), new Byte(256), new Byte(-1))));  #128 -> -128, 256 -> 0

            # max() compares the arguments, converts the larger to short and returns it
            assertEq(10, max.invoke(NOTHING, (10, -4)));
            assertEq(-1, max.invoke(NOTHING, (65535, 0)));
            assertEq(-32768, max.invoke(NOTHING, (32768, 32768)));

            # avg2() 'converts' all args to float and returns their average
            assertFloatEq(2.92, avg2.invoke(NOTHING, (new Float(3.14), new Float(2.7))), 0.0000001);

            # avg3() returns the average of its arguments
            assertFloatEq(2.92, avg3.invoke(NOTHING, (3.14, 2.7)), 0.00000000000000001);

            # wrap() & unwrap()
            assertEq(42, wrap.invoke(NOTHING, new Integer(42)));
            assertEq(42, unwrap.invoke(NOTHING, new Integer(42)));
            assertEq(-123, unwrap.invoke(NOTHING, (NOTHING,)));
            assertThrows("JNI-ERROR", sub() { unwrap.invoke(NOTHING, True); });
            assertThrows("JNI-ERROR", sub() { unwrap.invoke(1); });

            Integer i(10);
            Integer i2 = i;
            delete i2;
            assertThrows("OBJECT-ALREADY-DELETED", sub() { i.hashCode(); });

            # arrays
            list<auto> longArray = getLongArray.invoke();
            useArray.invoke(NOTHING, (longArray,));
        } catch (hash<ExceptionInfo> ex) {
            if (ex.arg.typeCode() == NT_OBJECT) {
                object arg = ex.arg;
                while (arg && arg.hasCallableMethod("getCause")) {
                    *object next = arg.getCause();
                    if (next) {
                        arg = next;
                    } else {
                        break;
                    }
                }
                printf("%s\n", arg.toString());
                arg.printStackTrace();
            }
            printf("%s\n", get_exception_string(ex));
            rethrow;
        }
    }

    testInstanceMethods() {
        lang::Class clsMethods = load_class("org/qore/jni/test/Methods");
        lang::Class clsA = load_class("org/qore/jni/test/A");
        lang::Class clsB = load_class("org/qore/jni/test/B");
        lang::Class clsC = load_class("org/qore/jni/test/C");

        Field f = clsMethods.getDeclaredField("c");
        Object c = f.get(NOTHING);
        f = clsMethods.getDeclaredField("b");
        Object b = f.get(NOTHING);

        reflect::Method fInA = clsA.getDeclaredMethod("f");
        reflect::Method fInB = clsB.getDeclaredMethod("f");
        reflect::Method fInC = clsC.getDeclaredMethod("f");
        reflect::Method mInC = clsC.getDeclaredMethod("m");

        # virtual dispatch
        assertEq(3, fInA.invoke(c));
        assertEq(3, fInB.invoke(c));
        assertEq(3, fInC.invoke(c));

        # FIXME: the following code does not work with Java 12
        #assertThrows("JNI-ERROR", "java.lang.IllegalAccessException", sub () { (MethodHandles::publicLookup()).findVirtual(clsA, "f", MethodType::methodType(Integer::TYPE)); });
        #MethodHandle handle = MethodHandles::publicLookup().unreflect(fInA);
        #assertThrows("JNI-ERROR", "java.lang.UnsupportedOperationException", sub () { handle.invokeExact(c); });

        assertEq(1, invoke_nonvirtual(fInA, c));
        assertEq(2, invoke_nonvirtual(fInB, c));
        assertEq(3, invoke_nonvirtual(fInC, c));

        # class mismatch
        mInC.setAccessible(True);
        assertThrows("JNI-ERROR", "java.lang.IllegalArgumentException", sub() { mInC.invoke(b); });
        assertThrows("JNI-ERROR", sub() { invoke_nonvirtual(mInC, b); });
    }

    testFloatConversions() {
        lang::Class clazz = load_class("org/qore/jni/test/FloatConversions");

        Method m = clazz.getDeclaredMethod("isNaNFloat", Float::TYPE);
        assertTrue(m.invoke(NOTHING, new Float(@NaN@)));
        assertTrue(clazz.getDeclaredMethod("isNInfFloat", Float::TYPE).invoke(NOTHING, new Float(-@Inf@)));
        assertTrue(clazz.getDeclaredMethod("isPInfFloat", Float::TYPE).invoke(NOTHING, new Float(@Inf@)));
        assertTrue(clazz.getDeclaredMethod("getNaNFloat").invoke().nanp());
        assertEq(-@Inf@, clazz.getDeclaredMethod("getNInfFloat").invoke());
        assertEq(@Inf@, clazz.getDeclaredMethod("getPInfFloat").invoke());

        assertTrue(clazz.getDeclaredMethod("isNaNDouble", Double::TYPE).invoke(NOTHING, @NaN@));
        assertTrue(clazz.getDeclaredMethod("isNInfDouble", Double::TYPE).invoke(NOTHING, -@Inf@));
        assertTrue(clazz.getDeclaredMethod("isPInfDouble", Double::TYPE).invoke(NOTHING, @Inf@));
        assertTrue(clazz.getDeclaredMethod("getNaNDouble").invoke().nanp());
        assertEq(-@Inf@, clazz.getDeclaredMethod("getNInfDouble").invoke());
        assertEq(@Inf@, clazz.getDeclaredMethod("getPInfDouble").invoke());
    }

    testStaticFields() {
        lang::Class clazz = load_class("org/qore/jni/test/StaticFields");

        Field z = clazz.getDeclaredField("z");
        Field b = clazz.getDeclaredField("b");
        Field c = clazz.getDeclaredField("c");
        Field s = clazz.getDeclaredField("s");
        Field i = clazz.getDeclaredField("i");
        Field j = clazz.getDeclaredField("j");
        Field f = clazz.getDeclaredField("f");
        Field d = clazz.getDeclaredField("d");
        Field n = clazz.getDeclaredField("n");
        Field l = clazz.getDeclaredField("l");
        Field ba = clazz.getDeclaredField("ba");
        Field o = clazz.getDeclaredField("o");
        Field oa = clazz.getDeclaredField("oa");
        Field ia = clazz.getDeclaredField("ia");

        z.setAccessible(True);
        z.set(NOTHING, True);
        assertTrue(z.get());

        b.setAccessible(True);
        b.set(NOTHING, new Byte(42));
        assertEq(42, b.get());

        c.setAccessible(True);
        c.set(NOTHING, new Character(32768));
        assertEq(32768, c.get());

        s.setAccessible(True);
        s.set(NOTHING, new Short(65535));
        assertEq(-1, s.get());

        i.setAccessible(True);
        i.set(NOTHING, new Integer(0x123456789));
        assertEq(0x23456789, i.get());

        j.setAccessible(True);
        j.set(NOTHING, new Long(0x123456789));
        assertEq(0x123456789, j.get());

        f.setAccessible(True);
        f.set(NOTHING, new Float(3.14));
        assertFloatEq(3.14, f.get(), 0.0001);
        f.set(NOTHING, new Float(@NaN@));
        assertTrue(f.get().nanp());

        d.setAccessible(True);
        d.set(NOTHING, 2.7);
        assertFloatEq(2.7, d.get(), 0.0000001);
        d.set(NOTHING, @Inf@);
        assertTrue(d.get().infp());

        Method m = clazz.getDeclaredMethod("wrap", Integer::TYPE);
        m.setAccessible(True);
        int myint = m.invoke(NOTHING, (new Integer(42), ));
        n.setAccessible(True);
        n.set(NOTHING, myint);
        m = clazz.getDeclaredMethod("unwrapN");
        m.setAccessible(True);
        assertEq(42, m.invoke());

        l.setAccessible(True);
        assertThrows("JNI-ERROR", sub(){ l.set(NOTHING, new Integer(myint)); });
        assertEq(NOTHING, l.get());

        ba.setAccessible(True);
        binary byteArray = ba.get();
        oa.setAccessible(True);
        list<auto> objectArray = oa.get();
        ia.setAccessible(True);
        list<auto> intArray = ia.get();

        o.setAccessible(True);
        o.set(NOTHING, JavaArray::get(byteArray));                               # arrays in Java are Objects
        # byte[] is not a subtype of Object[], but a list of ints is converted to int[]
        assertThrows("JNI-ERROR", \oa.set(), (NOTHING, JavaArray::get(byteArray)));
        oa.set(NOTHING, intArray);                                               # arrays in Java are covariant
        assertThrows("JNI-ERROR", sub() { ia.set(NOTHING, objectArray); });      # Object[] is not a subtype of Integer[]
        assertThrows("JNI-ERROR", sub() { n.set(NOTHING, byteArray); });         # byte[] is not a Number
        assertThrows("JNI-ERROR", sub() { ba.set(NOTHING, myint); });            # Integer is not a byte[]

        o.set(NOTHING, clazz);                                                   # classes are objects, too
    }

    testInstanceFields() {
        lang::Class clazz = load_class("org/qore/jni/test/Fields");

        Field f = clazz.getDeclaredField("instance");
        Object instance = f.get();

        Field z = clazz.getDeclaredField("z");
        z.setAccessible(True);
        Field b = clazz.getDeclaredField("b");
        Field c = clazz.getDeclaredField("c");
        Field s = clazz.getDeclaredField("s");
        Field i = clazz.getDeclaredField("i");
        Field j = clazz.getDeclaredField("j");
        f = clazz.getDeclaredField("f");
        Field d = clazz.getDeclaredField("d");
        Field ba = clazz.getDeclaredField("ba");
        Field o = clazz.getDeclaredField("o");
        Field oa = clazz.getDeclaredField("oa");
        Field ia = clazz.getDeclaredField("ia");

        z.set(instance, True);
        assertTrue(z.get(instance));

        b.set(instance, new Byte(42));
        assertEq(42, b.get(instance));

        c.set(instance, new Character(32768));
        assertEq(32768, c.get(instance));

        s.set(instance, new Short(65535));
        assertEq(-1, s.get(instance));

        i.set(instance, new Integer(0x123456789));
        assertEq(0x23456789, i.get(instance));

        j.set(instance, new Long(0x123456789));
        assertEq(0x123456789, j.get(instance));

        f.set(instance, new Float(3.14));
        assertFloatEq(3.14, f.get(instance), 0.0001);
        f.set(instance, new Float(@NaN@));
        assertTrue(f.get(instance).nanp());

        d.set(instance, 2.7);
        assertFloatEq(2.7, d.get(instance), 0.0000001);
        d.set(instance, @Inf@);
        assertTrue(d.get(instance).infp());

        binary byteArray = ba.get(instance);
        list objectArray = oa.get(instance);
        list intArray = ia.get(instance);

        o.set(instance, byteArray);                                             # arrays in Java are Objects
        # byte[] is not a subtype of Object[], but a list of ints is converted to int[]
        assertThrows("JNI-ERROR", \oa.set(), (instance, byteArray));
        oa.set(instance, intArray);                                             # arrays in Java are covariant
        assertThrows("JNI-ERROR", sub() { ia.set(instance, objectArray); });    # Object[] is not a subtype of Integer[]

        o.set(instance, clazz);                                                 # classes are objects, too

        assertThrows("JNI-ERROR", sub() { z.set(byteArray, True); });

        # test Qore explicit Field access
        assertEq(<000000>, instance.ba);
        assertEq((NOTHING, NOTHING, NOTHING), instance.oa);
        assertEq((NOTHING, NOTHING, NOTHING), instance.ia);

        # Qore's access protection is triggered here
        assertThrows("PRIVATE-MEMBER", sub () { delete instance.z;});
        # here the builtin methodGate method is called
        assertThrows("JNI-ACCESS-ERROR", sub () { auto bl = instance.z; delete bl; });
        # Qore's access protection is triggered here
        assertThrows("PRIVATE-MEMBER", sub () { delete instance.pi;});
        # here the builtin methodGate method is called
        assertThrows("JNI-ACCESS-ERROR", sub () { auto bl = instance.pi; delete bl; });

        MyFields mf();
        assertEq(1, mf.pi);
    }

    testCallback() {
        int i = 1;
        QoreInvocationHandler h(sub(Method m, *list args) { if (++i > 3) throw "CALLBACK-ERROR";});
        assertEq("org.qore.jni.QoreInvocationHandler", h.getClass().getCanonicalName());

        lang::Class runnableClass = load_class("java/lang/Runnable");
        Object o = implement_interface(h, runnableClass);
        lang::Class clazz = load_class("org/qore/jni/test/Callbacks");
        Method callNow = clazz.getDeclaredMethod("callNow", (runnableClass, ));
        Method callInThread = clazz.getDeclaredMethod("callInThread", (runnableClass, ));
        Method trueIfThrows = clazz.getDeclaredMethod("trueIfThrows", (runnableClass, ));
        Method doThrow = clazz.getDeclaredMethod("doThrow");
        callNow.invoke(NOTHING, o);
        assertEq(2, i);
        callInThread.invoke(NOTHING, o);
        usleep(200ms);
        assertEq(3, i);
        assertThrows("CALLBACK-ERROR", \callNow.invoke(), (NOTHING, o));
        assertThrows("CALLBACK-ERROR", \invoke(), (callNow, NOTHING, o));
        assertThrows("CALLBACK-ERROR", \invoke_nonvirtual(), (callNow, NOTHING, o));
        try {
            doThrow.invoke();
            assertEq(False, True);
        } catch (hash<ExceptionInfo> ex) {
            assertEq(True, ex.callstack[0].file =~ /\.java$/);
        }
        h.destroy();

        doThrow.setAccessible(True);
        trueIfThrows.setAccessible(True);
        h = new QoreInvocationHandler(sub(Method m, *list args) { doThrow.invoke(NOTHING); });
        assertTrue(trueIfThrows.invoke(NOTHING, implement_interface(h, runnableClass)));
        h.destroy();
    }

    testConstructor() {
        lang::Class cls = load_class("java/lang/Integer");
        Constructor ctor = cls.getConstructor(Integer::TYPE);
        int i = ctor.newInstance(new Integer(42));
        assertEq(42, cls.getDeclaredMethod("intValue").invoke(new Integer(i)));
    }

    testString() {
        lang::Class cls = load_class("java/lang/Integer");
        int i = cls.getMethod("valueOf", load_class("java/lang/String")).invoke(NOTHING, "42");
        assertEq(42, cls.getMethod("intValue").invoke(new Integer(i)));

        i = cls.getConstructor(Integer::TYPE).newInstance(new Integer(123));
        assertEq("123", cls.getMethod("toString").invoke(new Integer(i)));
    }

    testArray() {
        JavaArray a = new_array(Boolean::TYPE, 3);
        # get java class name
        assertEq("boolean[]", a.getClass().getCanonicalName());
        # get internal class name
        assertEq("[Z", a.getClass().getName());
        # get Qore class name
        assertEq("JavaArray", a.className());
        a.set(0, True);
        assertThrows("JNI-ERROR", sub() { a.set(3, True); });
        assertEq(3, a.length());
        assertTrue(a.get(0));
        assertFalse(a.get(1));

        a = new_array(Byte::TYPE, 4);
        a.set(0, 127);
        a.set(2, -128);
        a.set(3, 257);
        assertThrows("JNI-ERROR", sub() { a.get(4); });
        assertEq(127, a.get(0));
        assertEq(0, a.get(1));
        assertEq(-128, a.get(2));
        assertEq(1, a.get(3));

        a = new_array(Character::TYPE, 4);
        a.set(0, 65535);
        a.set(2, -1);
        a.set(3, 65537);
        assertEq(65535, a.get(0));
        assertEq(0, a.get(1));
        assertEq(65535, a.get(2));
        assertEq(1, a.get(3));

        a = new_array(Short::TYPE, 4);
        a.set(0, 32767);
        a.set(2, -32768);
        a.set(3, 65537);
        assertEq(32767, a.get(0));
        assertEq(0, a.get(1));
        assertEq(-32768, a.get(2));
        assertEq(1, a.get(3));

        a = new_array(Integer::TYPE, 4);
        a.set(0, 2147483647);
        a.set(2, -2147483648);
        a.set(3, 0x100000001);
        assertEq(2147483647, a.get(0));
        assertEq(0, a.get(1));
        assertEq(-2147483648, a.get(2));
        assertEq(1, a.get(3));

        a = new_array(Long::TYPE, 4);
        a.set(0, 9223372036854775807);
        a.set(2, -9223372036854775807 - 1);
        assertEq(9223372036854775807, a.get(0));
        assertEq(0, a.get(1));
        assertEq(-9223372036854775807 - 1, a.get(2));

        a = new_array(Float::TYPE, 4);
        a.set(0, 3.14);
        a.set(2, @NaN@);
        a.set(3, -@Inf@);
        assertFloatEq(3.14, a.get(0), 0.00001);
        assertFloatEq(0, a.get(1), 0.00001);
        assertTrue(a.get(2).nanp());
        assertTrue(a.get(3) < 0 && a.get(3).infp());

        a = new_array(Double::TYPE, 4);
        a.set(0, 3.14);
        a.set(2, @NaN@);
        a.set(3, -@Inf@);
        assertFloatEq(3.14, a.get(0), 0.00000000001);
        assertFloatEq(0, a.get(1), 0.00000000001);
        assertTrue(a.get(2).nanp());
        assertTrue(a.get(3) < 0 && a.get(3).infp());

        a = new_array(load_class("java/lang/String"), 4);
        a.set(0, "Hello, world!");
        a.set(2, NOTHING);
        assertThrows("JNI-ERROR", sub() { a.set(3, a); });
        assertEq("Hello, world!", a.get(0));
        assertEq(NOTHING, a.get(1));
        assertEq(NOTHING, a.get(2));

        #two-dimensional int array
        a = new_array(load_class("[I"), 2);
        a.set(0, (1, 2));
        a.set(1, (3, 4));
        assertEq(1, a.get(0)[0]);
        assertEq(2, a.get(0)[1]);
        assertEq(3, a.get(1)[0]);
        assertEq(4, a.get(1)[1]);
        /*
        a.set(0, new_array(Integer::TYPE, 2));
        a.set(1, new_array(Integer::TYPE, 2));
        a.get(0).set(0, 1);
        a.get(0).set(1, 2);
        a.get(1).set(0, 3);
        a.get(1).set(1, 4);
        assertEq(1, a.get(0).get(0));
        assertEq(2, a.get(0).get(1));
        assertEq(3, a.get(1).get(0));
        assertEq(4, a.get(1).get(1));
        */
    }

    testDispatchDtorThrows() {
        QoreInvocationHandler h;
        {
            DtorThrows instance();
            h = new QoreInvocationHandler(sub(Method m, *list args) { instance.dummy(); });
        }
        assertThrows("DTOR-ERROR", sub() { h.destroy(); });
    }

    testCallbackRetVal() {
        QoreInvocationHandler h(any sub(Method m, *list args) { return "STR"; });
        lang::Class stringFactoryClass = load_class("org/qore/jni/test/StringFactory");
        Object f = implement_interface(h, stringFactoryClass);
        lang::Class clazz = load_class("org/qore/jni/test/Callbacks");
        Method createString = clazz.getDeclaredMethod("createString", stringFactoryClass);
        assertEq("*STR*", createString.invoke(NOTHING, f));
    }

    testSpecialConversions() {
        reflect::Method m = load_class("org/qore/jni/test/StaticMethods").getDeclaredMethod("conversions", load_class("java/lang/String"));
        assertEq(NOTHING, m.invoke(NOTHING, ""));

        auto o = m.invoke(NOTHING, "method");
        assertTrue(o instanceof Method);
        assertEq("42", o.invoke(load_class("java/lang/Integer").getConstructor(Integer::TYPE).newInstance(new Integer(42))));

        o = m.invoke(NOTHING, "static method");
        assertTrue(o instanceof Method);
        assertEq("42", load_class("java/lang/Integer").getMethod("toString").invoke(new Integer(o.invoke(NOTHING, new Integer(42)))));

        o = m.invoke(NOTHING, "constructor");
        assertTrue(o instanceof Constructor);
        assertEq("42", load_class("java/lang/Integer").getMethod("toString").invoke(new Integer(o.newInstance(new Integer(42)))));

        lang::Class fieldsClass = load_class("org/qore/jni/test/Fields");
        Object fieldsInstance = fieldsClass.getDeclaredField("instance").get();

        o = m.invoke(NOTHING, "field");
        assertTrue(o instanceof Field);
        o.set(fieldsInstance, new Integer(123));
        assertEq(123, fieldsClass.getDeclaredField("i").get(fieldsInstance));

        o = m.invoke(NOTHING, "static field");
        assertTrue(o instanceof Field);
        o.set(NOTHING, new Integer(456));
        assertThrows("JNI-ERROR", "java.lang.IllegalArgumentException", \o.set());
        assertEq(456, load_class("org/qore/jni/test/StaticFields").getDeclaredField("i").get());
    }
}

class TestAppender inherits LoggerAppenderWithLayout {
    constructor() : LoggerAppenderWithLayout("test", new LoggerLayoutPattern("%d T%t [%p]: %m%n")) {
        open();
    }

    processEventImpl(int type, auto params) {
        switch (type) {
            case EVENT_LOG:
                print(params);
                break;
        }
    }
}

class RecA {
    *RecA getA() {
    }

    *RecB getB() {
    }

    *RecC getC() {
    }
}

class RecB {
    *RecA getA() {
    }

    *RecB getB() {
    }

    *RecC getC() {
    }
}

class RecC {
    *RecA getA() {
    }

    *RecB getB() {
    }

    *RecC getC() {
    }
}

class AbstractBase {
    abstract string test();

    static string test6() {
        return "z";
    }
}

class MiddleBase inherits AbstractBase {
    static string test4() {
        return "z";
    }
}

class Other;

class ConcreteBase inherits MiddleBase, Other {
    string test() {
        return "x";
    }

    string test2() {
        return "y";
    }
}

class ArgTest {
    static auto staticGet() {
        return argv;
    }

    auto get() {
        return argv;
    }
}

new Main();
