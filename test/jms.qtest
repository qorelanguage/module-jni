#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

/* jms.qtest

    Run with QORE_JNI_CLASSPATH set to a a JMS provider JAR

    NOTE: requires the JMS queue "abc" to be created in advance - ex with Glassfish:
    ---
    prompt% ./bin/asadmin
    asadmin> create-jms-resource --restype javax.jms.Queue --property Name=PhysicalQueue abc
    ---
*/

%new-style
%require-types
%strict-args
%enable-all-warnings

%requires jni
%requires QUnit
%requires Util

# import Java classes to our script
%module-cmd(jni) import javax.naming.InitialContext
%module-cmd(jni) import javax.jms.*

# add environment variable $GLASSFISH_JAR to the dynamic classpath (if set)
%module-cmd(jni) add-classpath $GLASSFISH_JAR

%exec-class Main

public class Main inherits QUnit::Test {
    private {
        Counter c(1);
        any data;

        const TextMsg = "Hello, world!";
    }

    constructor() : Test("JMS test", "1.0", \ARGV) {
        addTestCase("base test", \testJms());

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    testJms() {
        # these properties are the default; included here to provide an example for connecting to a remote server
        # NOTE: the InitialContext constructor takes a Hashtable object, which can also be passed as a hash
        Properties props();
        props.setProperty("java.naming.factory.initial", "com.sun.enterprise.naming.SerialInitContextFactory");
        props.setProperty("org.omg.CORBA.ORBInitialHost", "localhost");
        props.setProperty("org.omg.CORBA.ORBInitialPort", "3700");

        InitialContext ctx(props);

        Connection connection = cast<ConnectionFactory>(ctx.lookup("jms/__defaultConnectionFactory")).createConnection();
        Session session = connection.createSession(Session::CLIENT_ACKNOWLEDGE);

        Destination queue = cast<Destination>(ctx.lookup("abc"));

        MessageProducer producer = session.createProducer(queue);
        MessageConsumer consumer = session.createConsumer(queue);

        # in order to implement the MessageListener interface for the callback, we have to use implement_interface() as follows:
        ClassLoader loader = connection.getClass().getClassLoader();
        consumer.setMessageListener(cast<MessageListener>(implement_interface(loader, new QoreInvocationHandler(\messageCallback()), Class::forName("javax.jms.MessageListener", True, loader))));

        connection.start();

        TextMessage message = session.createTextMessage();
        message.setText(TextMsg);

        producer.send(message);
        # wait for message to be received
        c.waitForZero();

        assertEq(TextMsg, data);

        # unset the listener and exit
        consumer.setMessageListener(NOTHING);
    }

    # JMS message callback for the MessageListener interface
    messageCallback(Method method, *list args) {
        TextMessage msg = args[0];
        # ignore redeliveries
        if (msg.getJMSRedelivered())
            return;
        data = msg.getText();
        msg.acknowledge();
        if (m_options.verbose)
            printf("*** JMS message received: %y (id: %y)\n", msg.getText(), msg.getJMSMessageID());
        c.dec();
    }
}
