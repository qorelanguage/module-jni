#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

/** this test uses reflection to make basic JMS calls
    - tests the low-level API and reflection for making Java calls
    - see test/jms.qtest for simpler code that performs the same tests
*/

%new-style
%require-types
%strict-args
%enable-all-warnings

%requires jni
%requires QUnit

%exec-class Main

class ClassLoader {
    private:internal {
        Object this;
        Method loadClassMethod;
    }

    constructor(softlist urls) {
        Class urlClass = load_class("java/net/URL");
        Constructor urlCtor = urlClass.getConstructor((load_class("java/lang/String"),));

        list urlArray = map urlCtor.newInstance(($1,)), urls;

        Class classLoaderClass = load_class("java/net/URLClassLoader");

        loadClassMethod = classLoaderClass.getMethod("loadClass", (load_class("java/lang/String"),));
        this = classLoaderClass.getConstructor((load_class("[Ljava/net/URL;"),)).newInstance((urlArray,));
    }

    Class loadClass(string name) {
        name =~ tr/\//\./;   #/;#needed due to broken emacs qore-mode
        return loadClassMethod.invoke(this, (name,));
    }

    Object get() {
        return this;
    }
}

class Message {
    private {
        Object this;
    }

    constructor(Object this) {
        self.this = this;
    }

    Object get() {
        return this;
    }
}

class TextMessage inherits Message {
    private:internal {
        Method setTextMethod;
        Method getTextMethod;
        Method acknowledgeMethod;
        Method getJMSRedeliveredMethod;
        Method getJMSMessageIDMethod;
    }

    constructor(Object this) : Message(this) {
        Class clazz = this.getClass();
        setTextMethod = clazz.getMethod("setText", (load_class("java/lang/String"),));
        getTextMethod = clazz.getMethod("getText");
        acknowledgeMethod = clazz.getMethod("acknowledge");
        getJMSRedeliveredMethod = clazz.getMethod("getJMSRedelivered");
        getJMSMessageIDMethod = clazz.getMethod("getJMSMessageID");
    }

    setText(string text) {
        setTextMethod.invoke(this, (text,));
    }

    string getText() {
        return getTextMethod.invoke(this);
    }

    acknowledge() {
        acknowledgeMethod.invoke(this);
    }

    bool getJMSRedelivered() {
        return getJMSRedeliveredMethod.invoke(this);
    }

    string getJMSMessageID() {
        return getJMSMessageIDMethod.invoke(this);
    }
}

class MessageProducer {
    private:internal {
        Object this;
        Method sendMethod;
    }

    constructor(ClassLoader classLoader, Object this) {
        self.this = this;
        Class clazz = this.getClass();
        sendMethod = clazz.getMethod("send", (classLoader.loadClass("javax/jms/Message"),));
    }

    send(Message msg) {
        sendMethod.invoke(this, (msg.get(),));
    }
}

# workaround for issue 1303 - this should be directly in MessageConsumer::setMessageListener
code sub wrapListener(code listener, Class textMessageClass) {
    return sub(Method method, *list args) {
        Object o = args[0];
        Message m;
        if (textMessageClass.isInstance(o)) {
            m = new TextMessage(o);
        } else {
            m = new Message(o);
        }
        listener(m);
    };
}

class MessageConsumer {
    private:internal {
        ClassLoader classLoader;
        Object this;
        Method setMessageListenerMethod;
        Class textMessageClass;
        Class messageListenerClass;
        Method closeMethod;
    }

    constructor(ClassLoader classLoader, Object this) {
        self.classLoader = classLoader;
        self.this = this;
        Class clazz = this.getClass();
        setMessageListenerMethod = clazz.getMethod("setMessageListener", (classLoader.loadClass("javax/jms/MessageListener"),));
        textMessageClass = classLoader.loadClass("javax/jms/TextMessage");
        messageListenerClass = classLoader.loadClass("javax/jms/MessageListener");
        closeMethod = clazz.getMethod("close");
    }

    setMessageListener(code listener) {
        code w = wrapListener(listener, textMessageClass);
        setMessageListenerMethod.invoke(this, (implement_interface(classLoader.get(), new QoreInvocationHandler(w), messageListenerClass),));
    }

    setMessageListener() {
        setMessageListenerMethod.invoke(this, (NOTHING,));
    }

    close() {
        closeMethod.invoke(this);
    }
}

class Destination {
    private:internal {
        Object this;
    }

    constructor(Object this) {
        self.this = this;
    }

    Object get() {
        return this;
    }
}

class Session {
    public {
        const AUTO_ACKNOWLEDGE = 1;
        const CLIENT_ACKNOWLEDGE = 2;
        const DUPS_OK_ACKNOWLEDGE = 3;
        const SESSION_TRANSACTED = 0;
    }

    private:internal {
        ClassLoader classLoader;
        Object this;
        Method createProducerMethod;
        Method createConsumerMethod;
        Method createTextMessageMethod;
    }

    constructor(ClassLoader classLoader, Object this) {
        self.classLoader = classLoader;
        self.this = this;
        Class clazz = this.getClass();
        createProducerMethod = clazz.getMethod("createProducer", (classLoader.loadClass("javax/jms/Destination"),));
        createConsumerMethod = clazz.getMethod("createConsumer", (classLoader.loadClass("javax/jms/Destination"),));
        createTextMessageMethod = clazz.getMethod("createTextMessage");
    }

    MessageProducer createProducer(Destination dest) {
        return new MessageProducer(classLoader, createProducerMethod.invoke(this, (dest.get(),)));
    }

    MessageConsumer createConsumer(Destination dest) {
        return new MessageConsumer(classLoader, createConsumerMethod.invoke(this, (dest.get(),)));
    }

    TextMessage createTextMessage() {
        return new TextMessage(createTextMessageMethod.invoke(this));
    }
}

class Connection {
    private:internal {
        ClassLoader classLoader;
        Object this;
        Method closeMethod;
        Method startMethod;
        Method createSessionMethod;
    }

    constructor(ClassLoader classLoader, Object this) {
        self.classLoader = classLoader;
        self.this = this;
        Class clazz = this.getClass();
        closeMethod = clazz.getMethod("close");
        startMethod = clazz.getMethod("start");
        createSessionMethod = clazz.getMethod("createSession", (Integer::TYPE,));
    }

    destructor() {
        close();
    }

    close() {
        if (this) {
            closeMethod.invoke(this);
            delete this;
        }
    }

    Session createSession(int sessionMode) {
        return new Session(classLoader, createSessionMethod.invoke(this, (sessionMode,)));
    }

    start() {
        startMethod.invoke(this);
    }
}

class ConnectionFactory {
    private:internal {
        ClassLoader classLoader;
        Object this;
        Method createConnectionMethod;
    }

    constructor(ClassLoader classLoader, Object this) {
        self.classLoader = classLoader;
        self.this = this;
        createConnectionMethod = this.getClass().getMethod("createConnection");
    }

    Connection createConnection() {
        return new Connection(classLoader, createConnectionMethod.invoke(this));
    }
}

class JmsContext {
    private:internal {
        ClassLoader classLoader;
        Class ctxClass;
        Method lookup;
        Object namingContext;
    }

    constructor(softlist classpath) {
        classLoader = new ClassLoader(classpath);
        ctxClass = classLoader.loadClass("javax/naming/InitialContext");
        #load_class("javax/naming/InitialContext");
        lookup = ctxClass.getMethod("lookup", (load_class("java/lang/String"),));

        Class threadClass = load_class("java/lang/Thread");
        Object thread = threadClass.getMethod("currentThread").invoke();
        threadClass.getMethod("setContextClassLoader", (load_class("java/lang/ClassLoader"),)).invoke(thread, (classLoader.get(),));

        namingContext = ctxClass.getConstructor().newInstance();
    }

    ConnectionFactory getConnectionFactory(string name) {
        #return new ConnectionFactory(classLoader, lookup.invoke(namingContext, (name,)));
        try {
            return new ConnectionFactory(classLoader, lookup.invoke(namingContext, (name,)));
        }
        catch (hash ex) {
            printf("%N\n", ex.arg.getCause().getMessage());
            rethrow;
        }
    }

    Destination getDestination(string name) {
        return new Destination(lookup.invoke(namingContext, (name,)));
    }
}

public class Main inherits QUnit::Test {
    private {
        string jar;
        Counter c(1);
        any data;

        const TextMsg = "Hello, world!";
    }

    constructor() : Test("JMS test", "1.0", \ARGV) {
        addTestCase("base test", \testJms());

        # ex: file:///home/user/glassfish4/glassfish/lib/gf-client.jar
        *string jr = ARGV[0] ?? ENV.GLASSFISH_JAR;
        if (!jr) {
            printf("missing glassfish JAR path; enter it on the command-line or use GLASSFISH_JAR\n");
            exit(1);
        }
        jar = jr;
        # add the scheme if missing
        if (jar !~ /^\w+:/)
            jar = "file://" + jar;
        if (m_options.verbose > 1)
            printf("using glassfish URL: %y\n", jar);

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    testJms() {
        JmsContext ctx(jar);

        ConnectionFactory connectionFactory = ctx.getConnectionFactory("jms/__defaultConnectionFactory");
        Connection connection = connectionFactory.createConnection();
        Session session = connection.createSession(Session::CLIENT_ACKNOWLEDGE);

        #### NOTE: create the JMS queue in advance - ex:
        # prompt% ./bin/asadmin
        # asadmin> create-jms-resource --restype javax.jms.Queue --property Name=PhysicalQueue abc
        ####
        Destination queue = ctx.getDestination("abc");

        MessageProducer producer = session.createProducer(queue);
        MessageConsumer consumer = session.createConsumer(queue);

        consumer.setMessageListener(sub(object msg) {
            # ignore redeliveries
            if (msg.getJMSRedelivered())
                return;
            data = msg.getText();
            if (m_options.verbose)
                printf("*** JMS message received: %y (id: %y)\n", msg.getText(), msg.getJMSMessageID());
            msg.acknowledge();
            c.dec();
        });

        connection.start();

        TextMessage message = session.createTextMessage();
        message.setText(TextMsg);

        producer.send(message);
        c.waitForZero();
        assertEq(TextMsg, data);
        printf("done\n");
    }
}
