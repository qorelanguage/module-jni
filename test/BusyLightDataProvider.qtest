#!/usr/bin/env qore
# -*- mode: qore; indent-tabs-mode: nil -*-

%require-types
%enable-all-warnings
%new-style
%strict-args
%allow-injection

%requires Util
%requires QUnit
%requires ../qlib/BusyLightDataProvider

%exec-class BusyLightDataProviderTest

public class BusyLightDataProviderTest inherits QUnit::Test {
    private {
        BusyLightDataProvider busylight;

        # command-line options
        const MyOpts = Opts + {
            "conn": "c,connection=s",
        };

        const OptionColumn = 22;
    }

    constructor() : Test("BusyLightDataProviderTest Test", "1.0", \ARGV, MyOpts) {
        addTestCase("BusyLight test", \busylightTest());

        try {
            setupConnection();
        } catch (hash<ExceptionInfo> ex) {
            if (m_options.verbose > 2) {
                printf("%s\n", get_exception_string(ex));
            } else if (m_options.verbose) {
                printf("%s: %s\n", ex.err, ex.desc);
            }
        }

        # Return for compatibility with test harness that checks return value.
        set_return_value(main());
    }

    busylightTest() {
        if (!busylight) {
            testSkip("no connection");
        }

        assertEq("busylight", busylight.getName());
    }

    private usageIntern() {
        TestReporter::usageIntern(OptionColumn);
        printOption("-c,--connection=ARG", "set connection name", OptionColumn);
    }

    private error(string fmt) {
        throw "OPTION-ERROR", sprintf("%s: ERROR: %s", get_script_name(), vsprintf(fmt, argv));
    }

    private setupConnection() {
        *string conn_name = m_options.conn ?? ENV.BUSYLIGHT_CONNECTION;
        if (!conn_name.val()) {
            error("missing -c,--connection option or BUSYLIGHT_CONNECTION environment variable");
        }

        AbstractConnection conn = get_connection(conn_name);
        if (!(conn instanceof BusyLightConnection)) {
            error("connection %y is type %y; expecting \"BusyLightConnection\"", conn_name, conn.className());
        }
        busylight = conn.getDataProvider();
    }
}
