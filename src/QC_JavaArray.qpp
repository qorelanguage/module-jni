/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_JavaArray.qpp JavaArray class definition */
/*
  Qore Programming Language

  Copyright (C) 2022 Qore Technologies, s.r.o.

  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.

  Note that the Qore library is released under a choice of three open-source
  licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
  information.
*/

#include <qore/Qore.h>

#include "Array.h"
#include "QoreJniClassMap.h"
#include "QoreToJava.h"

using namespace jni;

//! Instances of this class represent Java arrays.
/**
 */
qclass JavaArray [arg=Array* array; ns=Jni::org::qore::jni; vparent=Object; flags=final];

//! Defined private to prevent Qore code from creating instances.
/**
 */
private:internal JavaArray::constructor() {
}

//! Returns the class of the object.
/**
    @return the class of the object
 */
Class JavaArray::getClass() {
    try {
        jni::Env env;
        return new QoreObject(QC_CLASS, qore_get_call_program_context(),
                              new QoreJniPrivateData(env.getObjectClass(array->getObject())));
    } catch (jni::Exception &e) {
        e.convert(xsink);
        return QoreValue();
    }
}

//! Returns the length of the array.
/**
    @return the length of the array
 */
int JavaArray::length() {
    try {
        return array->length();
    } catch (jni::Exception &e) {
        e.convert(xsink);
        return 0;
    }
}

//! Retrieves an element.
/**
    @param index the 0-based index of the element
    @return the value of the element
    @throws JNI-ERROR if the index is out of bounds
 */
auto JavaArray::get(int index) {
    try {
        return array->get(index, self->getProgram(), false);
    } catch (jni::Exception &e) {
        e.convert(xsink);
        return QoreValue();
    }
}

//! Sets the value of a an element.
/**
    @param index the 0-based index of the element
    @param value the value of the element
    @throws JNI-ERROR if the index is out of bounds or if the value type is incompatible with the array type
 */
nothing JavaArray::set(int index, auto value) {
    try {
        array->set(index, value);
    } catch (jni::Exception &e) {
        e.convert(xsink);
    }
    return QoreValue();
}

//! Returns a string representation of the array
/** @par Example:
    @code{.py}
string str = a.toString();
    @endcode

    @return a string representation of the array by calling java.util.Arrays.toString()

    @since jni 1.1
*/
string JavaArray::toString() [flags=CONSTANT] {
    try {
        return array->deepToString().release();
    } catch (jni::Exception &e) {
      e.convert(xsink);
   }
   return QoreValue();
}

//! Returns a "deep" string representation of the array
/** @par Example:
    @code{.py}
string str = a.deepToString();
    @endcode

    @return a "deep" string representation of the array by calling java.util.Arrays.deepToString()

    @since jni 1.1
*/
string JavaArray::deepToString() [flags=CONSTANT] {
    try {
        return array->deepToString().release();
    } catch (jni::Exception &e) {
      e.convert(xsink);
   }
   return QoreValue();
}

//! Returns a byte[] array for the binary object as an explicit conversion
/** @par Example:
    @code{.py}
JavaArray a = JavaArray::get(bin);
    @endcode

    @return a byte[] array for the binary object as an explicit conversion

    @since jni 1.1
*/
static JavaArray JavaArray::get(binary b) [flags=CONSTANT] {
    return new QoreObject(QC_JAVAARRAY, qore_get_call_program_context(), new Array(QoreToJava::makeByteArray(*b)));
}
