/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file ql_jni.qpp Definition of functions in the Jni namespace */
/*
    Qore Programming Language

    Copyright (C) 2016 - 2021 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

    Note that the Qore library is released under a choice of three open-source
    licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
    information.
*/

#include "Functions.h"
#include "Method.h"
#include "QoreJniClassMap.h"
#include "JavaToQore.h"

using namespace jni;

/** @defgroup JNI functions.
 */
//@{
namespace Jni::org::qore::jni;

//! Returns the version of the JNI API.
/**
    @return the version of the JNI API
 */
string get_version() {
    try {
        return jni::Functions::getVersion();
    } catch (jni::Exception& e) {
        e.convert(xsink);
        return QoreValue();
    }
}

//! Loads a Java class with given name.
/**
    @param name the name of the class to load in internal (\c "java/lang/String") format

    @return the loaded class

    @throws JNI-ERROR if the class cannot be loaded

    @par Example:
    @code{.py}
    Class c = Jni::load_class("java/lang/String");
    @endcode
 */
Jni::java::lang::Class load_class(string name) {
    try {
        QoreProgram* pgm = jni::jni_get_program_context();
        //printd(5, "load_class() pgm: %p\n", pgm);
        return new QoreObject(QC_CLASS, pgm, new QoreJniPrivateData(qjcm.findLoadClass(*name, pgm)));
    } catch (jni::Exception& e) {
        e.convert(xsink);
    }
}

//! Invokes a method with the given arguments in a virtual way; meaning that the method in the most derived class is executed; not necessarily the method passed as an argument
/** @param method the method to invoke
    @param object the object to use to invoke the method; for static methods, this argument can be @ref nothing

    @note
    - reflection is not used, so exceptions are thrown directly (i.e. not wrapped as \c java.lang.reflect.InvocationTargetException objects)
    - for static method invocations, this function is identical to @ref invoke_nonvirtual()
 */
Jni::java::lang::Object invoke(Jni::java::lang::reflect::Method[QoreJniPrivateData] method, *Jni::java::lang::Object[QoreJniPrivateData] object, ...) {
    ReferenceHolder<QoreJniPrivateData> m_holder(method, xsink);
    ReferenceHolder<QoreJniPrivateData> obj_holder(object, xsink);
    try {
        Env env;
        SimpleRefHolder<Class> cls(new Class(env.callObjectMethod(method->getObject(),
            Globals::methodMethodGetDeclaringClass, nullptr).as<jclass>()));
        BaseMethod m(method->getObject(), *cls);

        QoreProgram* pgm = jni_get_program_context();
        return object
            ? m.invoke(object->getObject(), args, pgm, 2)
            : m.invokeStatic(args, pgm, 2);
    } catch (jni::Exception& e) {
        e.convert(xsink);
        return QoreValue();
    }
}

//! Invokes a method with the given arguments in a non-virtual way; meaning that even if the object provided is a child class, the method given in the first argument is executed
/** @param method the method to invoke
    @param object the object to use to invoke the method; for static methods, this argument can be @ref nothing

    @note
    - reflection is not used, so exceptions are thrown directly (i.e. not wrapped as \c java.lang.reflect.InvocationTargetException objects)
    - for static method invocations, this function is identical to @ref invoke()
 */
Jni::java::lang::Object invoke_nonvirtual(Jni::java::lang::reflect::Method[QoreJniPrivateData] method, *Jni::java::lang::Object[QoreJniPrivateData] object, ...) {
    ReferenceHolder<QoreJniPrivateData> m_holder(method, xsink);
    ReferenceHolder<QoreJniPrivateData> obj_holder(object, xsink);
    try {
        Env env;
        SimpleRefHolder<Class> cls(new Class(env.callObjectMethod(method->getObject(), Globals::methodMethodGetDeclaringClass, nullptr).as<jclass>()));
        BaseMethod m(method->getObject(), *cls);

         QoreProgram* pgm = jni_get_program_context();
       return object
            ? m.invokeNonvirtual(object->getObject(), args, pgm, 2)
            : m.invokeStatic(args, pgm, 2);
    } catch (jni::Exception& e) {
        e.convert(xsink);
        return QoreValue();
    }
}

//! Creates a Java object that implements given interface using an invocation handler.
/**
    @param invocationHandler the invocation handler
    @param cls the interface to implement
    @return a Java object that implements the interface by calling the invocation handler

    @par Example:
    @code{.py}
    Class runnableClass = Jni::load_class("java/lang/Runnable");
    QoreInvocationHandler h(any sub(Method m, *list args) { doRun(); });
    Object runnableInstance = Jni::implement_interface(h, runnableClass);
    # runnableInstance now has a Java method void run() that calls Qore function doRun()
    @endcode
 */
Jni::java::lang::Object implement_interface(Jni::org::qore::jni::QoreInvocationHandler[jni::InvocationHandler] invocationHandler, Jni::java::lang::Class[QoreJniPrivateData] cls) {
    SimpleRefHolder<jni::InvocationHandler> invocationHandlerHolder(invocationHandler);
    SimpleRefHolder<QoreJniPrivateData> classHolder(cls);

    // get Qore class for Class object
    jni::Env env;
    jni::LocalReference<jstring> clsName = env.callObjectMethod(cls->getObject(), jni::Globals::methodClassGetName, nullptr).as<jstring>();
    jni::Env::GetStringUtfChars cname(env, clsName);
    QoreString jcname(cname.c_str());
    jcname.replaceAll(".", "/");
    LocalReference<jclass> jc = cls->makeLocal().as<jclass>();
    QoreProgram* pgm = jni_get_program_context();
    QoreClass* qc = qjcm.findCreateQoreClass(env, jc, pgm);

    try {
        return new QoreObject(qc, jni::jni_get_program_context(), new QoreJniPrivateData(jni::Functions::implementInterface(nullptr, invocationHandler, jc)));
    } catch (jni::Exception& e) {
        e.convert(xsink);
        return QoreValue();
    }
}

//! Creates a Java object that implements given interface using an invocation handler using an explicit class loader.
/**
    @param classLoader the class loader that loaded the interface
    @param invocationHandler the invocation handler
    @param cls the interface to implement
    @return a Java object that implements the interface by calling the invocation handler

    @par Example:
    @code{.py}
    ClassLoader classLoader = ...;
    Class runnableClass = load_class("java/lang/Runnable");
    QoreInvocationHandler h(any sub(Method m, *list args) { doRun(); });
    Object runnableInstance = Jni::implement_interface(classLoader, h, runnableClass);
    # runnableInstance now has a Java method void run() that calls Qore function doRun()
    @endcode
 */
Jni::java::lang::Object implement_interface(Jni::java::lang::ClassLoader[QoreJniPrivateData] classLoader, Jni::org::qore::jni::QoreInvocationHandler[jni::InvocationHandler] invocationHandler, Jni::java::lang::Class[QoreJniPrivateData] cls) {
    SimpleRefHolder<QoreJniPrivateData> classLoaderHolder(classLoader);
    SimpleRefHolder<jni::InvocationHandler> invocationHandlerHolder(invocationHandler);
    SimpleRefHolder<QoreJniPrivateData> classHolder(cls);

    // get Qore class for Class object
    jni::Env env;
    jni::LocalReference<jstring> clsName = env.callObjectMethod(cls->getObject(), jni::Globals::methodClassGetName, nullptr).as<jstring>();
    jni::Env::GetStringUtfChars cname(env, clsName);
    QoreString jcname(cname.c_str());
    jcname.replaceAll(".", "/");
    LocalReference<jclass> jc = cls->makeLocal().as<jclass>();
    QoreProgram* pgm = jni_get_program_context();
    QoreClass* qc = qjcm.findCreateQoreClass(env, jc, pgm);

    try {
        return new QoreObject(qc, jni::jni_get_program_context(), new QoreJniPrivateData(jni::Functions::implementInterface(classLoader->getObject(), invocationHandler, jc)));
    } catch (jni::Exception& e) {
        e.convert(xsink);
        return QoreValue();
    }
}

//! Allocates a new Java array
/** @param cls the Class of the component type of the Array
    @param size the size of the array to allocate

    @return the allocated array
 */
Jni::org::qore::jni::JavaArray new_array(Jni::java::lang::Class[QoreJniPrivateData] cls, int size) {
    ReferenceHolder<QoreJniPrivateData> holder(cls, xsink);

    try {
        return new QoreObject(QC_JAVAARRAY, jni::jni_get_program_context(), new Array(cls->makeLocal().as<jclass>(), size));
    } catch (jni::Exception& e) {
        e.convert(xsink);
        return QoreValue();
    }
}

//! Creates a class object from bytecode data
/** @par Example:
    @code{.py}
java::lang::Class cls = define_class(name, bytecode);
    @endcode

    @param name the name of the class (ex: \c "org/qore/my_package/ClassName")
    @param bytecode the byte code of the class

    @note the class will be created using the classloader for the containing %Program object

    @since %jni 1.1
*/
Jni::org::qore::jni::Class define_class(string name, binary bytecode) {
    try {
        ModifiedUtf8String utf8_name(name);
        jni::Env env;
        // NOTE: this must be qore_get_call_program_context() and not jni::jni_get_program_context()
        // as the caller's program context must be used in all cases
        QoreProgram* pgm = qore_get_call_program_context();
        JniExternalProgramData* jpc = static_cast<JniExternalProgramData*>(pgm->getExternalData("jni"));
        assert(jpc);
        LocalReference<jclass> jcls = env.defineClass(utf8_name.c_str(), jpc->getClassLoader(),
            static_cast<const unsigned char*>(bytecode->getPtr()), bytecode->size());
        return new QoreObject(QC_CLASS, pgm, new QoreJniPrivateData(jcls));
    } catch (jni::Exception& e) {
        e.convert(xsink);
        return QoreValue();
    }
}

//! Sets the "save object" callback for %Qore objects created from Java code
/** @par Example:
    @code{.py}
hash<string, object> object_cache;
code callback = sub (object obj) {
    # save object in object cache, so it doesn't go out of scope
    object_cache{obj.uniqueHash()} = obj;
}
set_save_object_callback(callback);
    @endcode

    @param save_object_callback the callback to save any %Qore objects created in Java code, must take an argument of
    type @ref object_type "object"

    Due to the differences in garbage collection approaches between %Qore and Java, %Qore objects must be managed with
    a deterministic life cycle; Java objects have only weak references to %Qore objects due to the lack of
    destructors in Java and the lack of determinism in the JVM for object lifecycle management.

    The callback set here will be called any time a %Qore object is created from Java code; if no callback is set,
    then the standard thread-local implementation is used where %Qore objects are saved in a thread-local hash.

    @see @ref jni_qore_object_lifecycle_management for more information
*/
set_save_object_callback(*code save_object_callback) [dom=PROCESS] {
    // NOTE: this must be qore_get_call_program_context() and not jni::jni_get_program_context() or jni_get_context()
    // as the caller's program context must be used in all cases
    QoreProgram* pgm = qore_get_call_program_context();
    JniExternalProgramData* jpc = static_cast<JniExternalProgramData*>(pgm->getExternalData("jni"));
    assert(jpc);
    jpc->setSaveObjectCallback(save_object_callback);
}

//! Returns the class loader associated with the current program
/** @par Example:
    @code{.py}
ClassLoader loader = get_class_loader();
    @endcode

    @return the class loader associated with the current program

    @since jni 2.0
*/
Jni::java::lang::Object get_class_loader() {
    try {
        jni::Env env;

        QoreProgram* pgm = jni_get_program_context();
        JniExternalProgramData* jpc = static_cast<JniExternalProgramData*>(pgm->getExternalData("jni"));
        assert(jpc);

        LocalReference<jclass> jc = Globals::classQoreURLClassLoader.toLocal();
        QoreClass* qc = qjcm.findCreateQoreClass(env, jc, pgm);

        return new QoreObject(qc, pgm, new QoreJniPrivateData(jpc->getClassLoader()));
    } catch (jni::Exception& e) {
        e.convert(xsink);
        return QoreValue();
    }
}
//@}
