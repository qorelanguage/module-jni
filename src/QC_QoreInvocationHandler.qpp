/* -*- mode: c++; indent-tabs-mode: nil -*- */
/** @file QC_QoreInvocationHandler.qpp QoreInvocationHandler class definition */
/*
    Qore Programming Language

    Copyright (C) 2016 - 2018 Qore Technologies, s.r.o.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

    Note that the Qore library is released under a choice of three open-source
    licenses: MIT (as above), LGPL 2+, or GPL 2+; see README-LICENSE for more
    information.
*/

#include <qore/Qore.h>

#include "InvocationHandler.h"
#include "QoreJniClassMap.h"

using namespace jni;

//! Represents an invocation handler used to implement callback from Java to Qore.
/**
 */
qclass QoreInvocationHandler [arg=jni::InvocationHandler* handler; ns=Jni::org::qore::jni; flags=final; vparent=InvocationHandler];

//! Creates a new invocation handler.
/**
    @param dispatcher a function that implements the dispatching, see example

    @par Example:
    @code{.py}
    QoreInvocationHandler h(any sub(Jni::Method m, *list args) {
        # handle invocation of method m with arguments args
    });
    @endcode
 */
QoreInvocationHandler::constructor(code dispatcher) {
    try {
        self->setPrivate(CID_QOREINVOCATIONHANDLER, new jni::InvocationHandler(dispatcher));
    } catch (jni::Exception &e) {
        e.convert(xsink);
    }
}

//! Explicitly destroys the invocation handler even if it is still reachable from Java.
/**
 */
nothing QoreInvocationHandler::destroy() {
    try {
        handler->destroy();
    } catch (jni::Exception &e) {
        e.convert(xsink);
    }
}

//! invocation method for the handler
/** @throw ERROR-UNSUPPORTED when called from Qore; currently this can only be invoked from Java
 */
auto QoreInvocationHandler::invoke(auto object, *Jni::java::lang::reflect::Method[QoreJniPrivateData] method, softlist<auto> vargs) {
    xsink->raiseException("ERROR-UNSUPPORTED", "cannot call QoreInvocationHandler::invoke() from Qore yet; not yet implemented (can only be called from Java at the moment)");
    return QoreValue();
}
